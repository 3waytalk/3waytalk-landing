"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();console.log("landing"),function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;this.fired=!1;var t=document.querySelector(".header"),i=document.querySelector(".clock");$(".landing").fullpage({sectionSelector:".landing__section",navigation:!0,afterLoad:this.hideLoader.bind(this),afterRender:this.recountSlides.bind(this),afterResize:this.recountSlides.bind(this),onLeave:function(n,o,a){1==o?(t.classList.toggle("header_open",!1),e.hideNav()):(t.classList.toggle("header_open",!0),e.showNav()),6==o?i.classList.toggle("clock_visible",!0):i.classList.toggle("clock_visible",!1)}}),document.querySelector(".footer__top").addEventListener("click",this.scrollToTop.bind(this))}},{key:"hideNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:0},{duration:300,complete:function(){e.nav.style.display="none"}})}},{key:"showNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:1},{duration:300,begin:function(){e.nav.style.display="block"}})}},{key:"hideLoader",value:function(){if(!this.fired){this.fired=!0,this.nav=document.getElementById("fp-nav"),this.hideNav();var e=document.querySelector(".loader__wrapper"),t={opacity:0},i={duration:500,complete:function(){e.parentNode.removeChild(e)}};Velocity(e,t,i)}}},{key:"recountSlides",value:function(){var e=document.querySelector(".clock"),t=document.querySelector(".fp-slidesContainer"),i=t.querySelector(".slide__title"),n=t.querySelector(".slide__text"),o=Math.min(t.offsetHeight-i.offsetHeight-n.offsetHeight+90,702),a=o/702;t.offsetWidth<=750?(e.style[Modernizr.prefixed("transform")]="scale("+a+")",e.style.margin="0 0 0 -"+e.offsetWidth*a*.33+"px"):e.removeAttribute("style")}},{key:"scrollToTop",value:function(e){e.preventDefault(),$.fn.fullpage.moveTo(1,0)}}]),e}();new e}();
"use strict";function _classCallCheck(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function i(i,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(i,n.key,n)}}return function(e,o,n){return o&&i(e.prototype,o),n&&i(e,n),e}}();console.log("layout"),function(){window.mobileAndTabletcheck=function(){var i=!1;return function(e){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(i=!0)}(navigator.userAgent||navigator.vendor||window.opera),i},window.isMobile={Android:function(){return/Android/i.test(navigator.userAgent)},BlackBerry:function(){return/BlackBerry/i.test(navigator.userAgent)},iOS:function(){return/iPhone|iPad|iPod/i.test(navigator.userAgent)},Windows:function(){return/IEMobile/i.test(navigator.userAgent)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Windows()}};var i=function(){function i(){_classCallCheck(this,i);var e=new Promise(function(i,e){return"loading"!=document.readyState?i():void document.addEventListener("DOMContentLoaded",function(){return i()})});e.then(this.init.bind(this))}return _createClass(i,[{key:"init",value:function(){window.isMobile.Android()?document.body.parentNode.classList.add("android"):window.isMobile.iOS()?document.body.parentNode.classList.add("ios"):window.mobileAndTabletcheck()?document.body.parentNode.classList.add("unknown-mobile"):document.body.parentNode.classList.add("desktop")}}]),i}();new i}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}();console.log("Menu"),function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this,t=document.querySelectorAll(".login__back"),o=document.querySelectorAll(".login__login-button, .login_success .login__submit"),i=document.querySelectorAll(".menu__interpreter, .header__interpreter");this.menu_popup_open=!1,this.login_button=document.querySelector(".menu__login"),this.register_button=document.querySelector(".menu__register"),this.step1=document.querySelector(".login_register-step-1"),this.step1_form=document.querySelector(".login_register-step-1 form.login__form"),this.step2=document.querySelector(".login_register-step-2"),this.step2_form=document.querySelector(".login_register-step-2 form.login__form"),this.mobile_popup=document.querySelector(".popup_mobile"),this.mobile_popup_close=this.mobile_popup.querySelector(".popup__close"),this.wrapper=document.querySelector(".menu__wrapper"),this.header_register_button=document.querySelector(".header__link_register"),this.header_login_button=document.querySelector(".header__link_login"),this.recovery_button=document.querySelector(".login__password-recovery"),this.lightbox=document.querySelector("body>.lightbox"),this.login_popup=document.querySelector(".login_login"),this.recovery=document.querySelector(".login_recovery"),this.password=document.querySelector(".login_password"),this.recovery_form=this.recovery.querySelector(".login__form"),this.password_form=this.password.querySelector(".login__form"),this.error_message=document.querySelector(".login_error"),this.email=document.querySelector(".login_email"),this.success=document.querySelector(".login_success"),this.current=document.querySelector(".login_open"),this.last=[],this.login_button.addEventListener("click",this.openLoginForm.bind(this)),this.recovery_button.addEventListener("click",this.openRecovery.bind(this)),this.lightbox.addEventListener("click",this.closeAll.bind(this)),this.register_button.addEventListener("click",this.openRegister.bind(this)),this.header_login_button.addEventListener("click",this.openLoginOuter.bind(this)),this.header_register_button.addEventListener("click",this.openLoginOuter.bind(this)),this.mobile_popup_close.addEventListener("click",this.closeMobilePopup.bind(this)),this.recovery_form.addEventListener("submit",this.sendData.bind(this)),this.password_form.addEventListener("submit",this.sendData.bind(this)),this.step1_form.addEventListener("submit",this.openNext.bind(this)),this.step2_form.addEventListener("submit",this.sendData.bind(this)),window.addEventListener("resize",this.reposPopup.bind(this)),$(".login select").select2(),[].forEach.call(i,function(t){t.addEventListener("click",e.openMobilePopup.bind(e))}),[].forEach.call(t,function(t){t.addEventListener("click",e.goback.bind(e))}),[].forEach.call(o,function(t){t.addEventListener("click",e.openLoginInner.bind(e))}),this.WebRTCSupport=!document.documentElement.classList.contains("no-peerconnection"),this.WebRTCSupport||([].forEach.call(document.querySelectorAll("form.login__form input, form.login__form button, form.login__form select"),function(e){e.setAttribute("disabled","disabled")}),[].forEach.call(document.documentElement.querySelectorAll("form.login__form"),function(e){e.addEventListener("click",function(t){e.closest(".login").querySelector(".popup_browser").open()})}),[].forEach.call(document.querySelectorAll(".popup_browser"),function(t){e.showPopup(t)}))}},{key:"openNext",value:function(e){e.preventDefault(),0!=this.step1_form.validate()&&this.openForm(this.step2)}},{key:"reposPopup",value:function(e){this.menu_popup_open&&(this.mobile_popup.style[Modernizr.prefixed("transform")]="translateY("+this.mobile_popup.offsetHeight+"px)")}},{key:"closeMobilePopup",value:function(){var e=this;this.menu_popup_open&&(this.menu_popup_open=!1,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:0},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:1},{duration:250,begin:function(){e.mobile_popup_button.style.display="block"}}))}},{key:"openMobilePopup",value:function(){var e=this;this.menu_popup_open||(this.menu_popup_open=!0,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:this.mobile_popup.offsetHeight+"px"},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:0},{duration:250,complete:function(){e.mobile_popup_button.style.display="none"}}))}},{key:"showPopup",value:function(e){void 0!=e.show?e.show():setTimeout(this.showPopup.bind(this,e),50)}},{key:"openLoginOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.login_button.click()},800)}},{key:"openRegisterOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.register_button.click()},800)}},{key:"sendData",value:function(e){var t=this;e.preventDefault();var o=e.currentTarget;if(0!=o.validate())try{!function(){var e=4,i=200,n=void 0,r=new XMLHttpRequest,s=new Promise(function(n,s){r.open("POST",o.getAttribute("action")),r.send(new FormData(o)),r.onreadystatechange=function(){r.readyState===e&&(t.recovery_form.reset(),r.status===i?n():s({code:parseInt(r.status,10),message:r.statusText}))}});n=o.hasAttribute("data-check")?t.showCheckMessage.bind(t):t.showSuccessMessage.bind(t),s.then(n)["catch"](t.showErrorMessage.bind(t))}()}catch(i){console.log("error: ",i)}}},{key:"showCheckMessage",value:function(){this.openForm(this.email)}},{key:"showSuccessMessage",value:function(){this.openForm(this.success)}},{key:"openLoginInner",value:function(){this.openForm(this.login_popup)}},{key:"showErrorMessage",value:function(e){this.last=new Array,console.log(e.code,"Responce status code: "+e.code+". "+e.message+"."),this.openForm(this.error_message,!0)}},{key:"goback",value:function(){this.openForm()}},{key:"emailHaveSend",value:function(){this.openForm(this.email)}},{key:"openRegisterInner",value:function(){this.openForm(this.step1)}},{key:"openRegister",value:function(){var e=this;event.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var t={right:0},o={duration:250};Velocity(this.step1,t,o),this.current=this.step1,t={opacity:1},o={begin:function(){e.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,t,o)}},{key:"openRecovery",value:function(e){e.preventDefault(),this.WebRTCSupport&&this.openForm(this.recovery)}},{key:"openForm",value:function(e,t){$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o=this.current.querySelector("form");if(null!=o&&setTimeout(function(){o.clear()},250),"undefined"==typeof e&&this.last.length>0)e=this.last.pop();else{if("undefined"==typeof e&&0==this.last.length)return void this.closeAll();1!=t&&this.last.push(this.current)}var i={right:-this.current.offsetWidth+"px"},n={duration:250};Velocity(this.current,i,n),i={right:0},n={duration:250},Velocity(e,i,n),this.current=e}},{key:"closeAll",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!0),$.fn.fullpage.setKeyboardScrolling(!0);var t={right:-this.current.offsetWidth+"px"},o={duration:250};Velocity(this.current,t,o),this.current=null,t={opacity:0},o={complete:function(){e.lightbox.style.display="none"},duration:250},Velocity(this.lightbox,t,o),this.clearAll()}},{key:"clearAll",value:function(){[].forEach.call(document.querySelectorAll("form"),function(e){e.clear()}),$(".login select").select2("destroy"),$(".login select").select2()}},{key:"openLoginForm",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o={right:0},i={duration:250};Velocity(this.login_popup,o,i),this.current=this.login_popup,o={opacity:1},i={begin:function(){t.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,o,i)}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}();console.log("popup"),function(){var t=function(){function t(e){_classCallCheck(this,t),this.popup=e,e.querySelector(".popup__close").addEventListener("click",this.close.bind(this)),this.popup.close=this.close.bind(this),this.popup.open=this.open.bind(this),this.popup.show=this.show.bind(this),this.status=!1,this.jamping=!1}return _createClass(t,[{key:"show",value:function(){this.popup.style.display="block",this.popup.style[Modernizr.prefixed("transform")]="rotateX(0)",this.status=!0}},{key:"hide",value:function(){this.popup.style.display="none",this.popup.style[Modernizr.prefixed("transform")]="rotateX(180deg)",this.status=!1,Velocity(this.popup,"stop")}},{key:"close",value:function(){var t=this;this.jamping||this.status&&(Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"120deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;if(!this.jamping){if(this.status)return void this.jump();this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"0deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!0}}),Velocity(this.popup,{rotateX:"20deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"10deg"},200),Velocity(this.popup,{rotateX:"0deg"},{duration:175,complete:function(){t.jamping=!1}})}}},{key:"jump",value:function(){var t=this;this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"35deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"20deg"},200),Velocity(this.popup,{rotateX:"0deg"},175),Velocity(this.popup,{rotateX:"15deg"},250),Velocity(this.popup,{rotateX:"0deg"},{duration:225,complete:function(){t.jamping=!1}})}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".popup_browser"),function(e){new t(e)})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}();!function(){var e=function(){function e(t){_classCallCheck(this,e),this.form=t,t.setAttribute("novalidate","novalidate"),t.addEventListener("submit",this.validate.bind(this)),t.validate=this.validate.bind(this),t.clear=this.clear.bind(this),this.messages={en:{required:"Required field",email:"Wrong email format",equal:"Password fields should be equal",url:"Wrong url format"},ru:{required:"Поле обязательно для заполнения",email:"Проверьте формат email",equal:"Пароли должны совпадать",url:"Проверьте формат URL"}}}return _createClass(e,[{key:"clear",value:function(){this.form.reset(),setTimeout(function(){var e=document.querySelectorAll(".form-error"),t=document.querySelectorAll("[data-valid], [data-invalid]");[].forEach.call(e,function(e){e.parentNode.removeChild(e)}),[].forEach.call(t,function(e){e.removeAttribute("data-invalid"),e.removeAttribute("data-valid")})},100)}},{key:"addError",value:function(e,t,r){if(null==e.parentNode.querySelector('.form-error[data-type="'+r+'"]')){var a=document.createElement("P");a.appendChild(document.createTextNode(t)),a.classList.add("form-error"),a.setAttribute("data-type",r),e.parentNode.appendChild(a)}}},{key:"clearError",value:function(e,t){var r=e.parentNode.querySelector('.form-error[data-type="'+t+'"]');null!=r&&e.parentNode.removeChild(r)}},{key:"validate",value:function(e){var t=this;"undefined"==typeof e||e.currentTarget.hasAttribute("data-reload")||e.preventDefault();var r=!0,a=this.form.querySelectorAll("[data-equal]"),l=this.form.querySelectorAll("[required]"),o=this.form.querySelectorAll('input[type="url"]'),i=this.form.querySelectorAll('input[type="email"]'),n=new RegExp("^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$","i"),u=new RegExp("^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$");[].forEach.call(a,function(e){var a=t.form.querySelector(e.getAttribute("data-equal"));e.value.trim()!=a.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].equal,"equal")):t.clearError(e,"equal")}),[].forEach.call(l,function(e){""===e.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].required,"required")):t.clearError(e,"required")}),[].forEach.call(o,function(e){e.value.trim().length>0&&n.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].url,"url")):t.clearError(e,"url")}),[].forEach.call(i,function(e){e.value.trim().length>0&&u.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].email,"email")):t.clearError(e,"email")});var d=Array.prototype.slice.call(a).concat(Array.prototype.slice.call(l),Array.prototype.slice.call(o),Array.prototype.slice.call(i));[].forEach.call(d,function(e){var t=e.parentNode.querySelector(".form-error");if(null!=t){var r=document.createAttribute("data-invalid");r.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(r),e.nextSibling.removeAttribute("data-valid")):(e.setAttributeNode(r),e.removeAttribute("data-valid"))}else{var a=document.createAttribute("data-valid");a.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(a),e.nextSibling.removeAttribute("data-invalid")):(e.setAttributeNode(a),e.removeAttribute("data-invalid"))}});var c=this.form.querySelectorAll(".form_error").length;return c>0&&(r=!1),r===!1&&"undefined"!=typeof e&&e.preventDefault(),r}}]),e}(),t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(function(){var t=document.querySelectorAll("form");[].forEach.call(t,function(t){new e(t)})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmRpbmcvbGFuZGluZy5qcyIsImxheW91dC9sYXlvdXQuanMiLCJsb2dpbi9sb2dpbi5qcyIsInBvcHVwL3BvcHVwLmpzIiwidmFsaWRhdG9yL3ZhbGlkYXRpb24uanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJjb25zb2xlIiwibG9nIiwiTGFuZGdpbmciLCJ0aGlzIiwicmVhZHkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIiwiaW5pdCIsImJpbmQiLCJ2YWx1ZSIsIl90aGlzIiwiZmlyZWQiLCJoZWFkZXIiLCJxdWVyeVNlbGVjdG9yIiwiY2xvY2siLCIkIiwiZnVsbHBhZ2UiLCJzZWN0aW9uU2VsZWN0b3IiLCJuYXZpZ2F0aW9uIiwiYWZ0ZXJMb2FkIiwiaGlkZUxvYWRlciIsImFmdGVyUmVuZGVyIiwicmVjb3VudFNsaWRlcyIsImFmdGVyUmVzaXplIiwib25MZWF2ZSIsImluZGV4IiwibmV4dEluZGV4IiwiZGlyZWN0aW9uIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiaGlkZU5hdiIsInNob3dOYXYiLCJzY3JvbGxUb1RvcCIsIl90aGlzMiIsIlZlbG9jaXR5IiwibmF2Iiwib3BhY2l0eSIsImR1cmF0aW9uIiwiY29tcGxldGUiLCJzdHlsZSIsImRpc3BsYXkiLCJfdGhpczMiLCJiZWdpbiIsImdldEVsZW1lbnRCeUlkIiwibG9hZGVyIiwib3B0aW9ucyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNsb2NrX3NsaWRlIiwidGl0bGUiLCJ0ZXh0IiwiaGVpZ2h0IiwiTWF0aCIsIm1pbiIsIm9mZnNldEhlaWdodCIsInBlcmMiLCJvZmZzZXRXaWR0aCIsIk1vZGVybml6ciIsInByZWZpeGVkIiwibWFyZ2luIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZuIiwibW92ZVRvIiwid2luZG93IiwibW9iaWxlQW5kVGFibGV0Y2hlY2siLCJjaGVjayIsImEiLCJ0ZXN0Iiwic3Vic3RyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidmVuZG9yIiwib3BlcmEiLCJpc01vYmlsZSIsIkFuZHJvaWQiLCJCbGFja0JlcnJ5IiwiaU9TIiwiV2luZG93cyIsImFueSIsIkxheW91dCIsImJvZHkiLCJhZGQiLCJNZW51IiwiYmFja19idXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImxvZ2luX2J1dHRvbnMiLCJtb2JpbGVfcG9wdXBfYnV0dG9ucyIsIm1lbnVfcG9wdXBfb3BlbiIsImxvZ2luX2J1dHRvbiIsInJlZ2lzdGVyX2J1dHRvbiIsInN0ZXAxIiwic3RlcDFfZm9ybSIsInN0ZXAyIiwic3RlcDJfZm9ybSIsIm1vYmlsZV9wb3B1cCIsIm1vYmlsZV9wb3B1cF9jbG9zZSIsIndyYXBwZXIiLCJoZWFkZXJfcmVnaXN0ZXJfYnV0dG9uIiwiaGVhZGVyX2xvZ2luX2J1dHRvbiIsInJlY292ZXJ5X2J1dHRvbiIsImxpZ2h0Ym94IiwibG9naW5fcG9wdXAiLCJyZWNvdmVyeSIsInBhc3N3b3JkIiwicmVjb3ZlcnlfZm9ybSIsInBhc3N3b3JkX2Zvcm0iLCJlcnJvcl9tZXNzYWdlIiwiZW1haWwiLCJzdWNjZXNzIiwiY3VycmVudCIsImxhc3QiLCJvcGVuTG9naW5Gb3JtIiwib3BlblJlY292ZXJ5IiwiY2xvc2VBbGwiLCJvcGVuUmVnaXN0ZXIiLCJvcGVuTG9naW5PdXRlciIsImNsb3NlTW9iaWxlUG9wdXAiLCJzZW5kRGF0YSIsIm9wZW5OZXh0IiwicmVwb3NQb3B1cCIsInNlbGVjdDIiLCJmb3JFYWNoIiwiY2FsbCIsImJ1dHRvbiIsIm9wZW5Nb2JpbGVQb3B1cCIsImdvYmFjayIsIm9wZW5Mb2dpbklubmVyIiwiV2ViUlRDU3VwcG9ydCIsImRvY3VtZW50RWxlbWVudCIsImNvbnRhaW5zIiwiZWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImZvcm0iLCJjbG9zZXN0Iiwib3BlbiIsInBvcHVwIiwic2hvd1BvcHVwIiwidmFsaWRhdGUiLCJvcGVuRm9ybSIsInRyYW5zbGF0ZVkiLCJtb2JpbGVfcG9wdXBfYnV0dG9uIiwidW5kZWZpbmVkIiwic2hvdyIsInNldFRpbWVvdXQiLCJfdGhpczQiLCJjbGljayIsIl90aGlzNSIsIl90aGlzNiIsImN1cnJlbnRUYXJnZXQiLCJET05FIiwiT0siLCJtZXNzYWdlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJsb2FkZWQiLCJnZXRBdHRyaWJ1dGUiLCJzZW5kIiwiRm9ybURhdGEiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNldCIsInN0YXR1cyIsImNvZGUiLCJwYXJzZUludCIsInN0YXR1c1RleHQiLCJoYXNBdHRyaWJ1dGUiLCJzaG93Q2hlY2tNZXNzYWdlIiwic2hvd1N1Y2Nlc3NNZXNzYWdlIiwic2hvd0Vycm9yTWVzc2FnZSIsImVyciIsInJlYXNvbiIsIkFycmF5IiwiX3RoaXM3Iiwic2V0QWxsb3dTY3JvbGxpbmciLCJzZXRLZXlib2FyZFNjcm9sbGluZyIsInJpZ2h0IiwiZG9udF9zYXZlIiwiY2xlYXIiLCJwb3AiLCJwdXNoIiwiX3RoaXM4IiwiY2xlYXJBbGwiLCJfdGhpczkiLCJQb3B1cCIsImNsb3NlIiwiamFtcGluZyIsInJvdGF0ZVgiLCJqdW1wIiwiVmFsaWRhdGlvbiIsIm1lc3NhZ2VzIiwiZW4iLCJyZXF1aXJlZCIsImVxdWFsIiwidXJsIiwicnUiLCJlcnJvcnMiLCJmaWVsZHMiLCJlcnJvciIsImZpZWxkIiwidHlwZSIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwidmFsaWQiLCJlcXVhbF9maWVsZHMiLCJyZXF1aXJlZF9maWVsZHMiLCJ1cmxfZmllbGRzIiwiZW1haWxfZmllbGRzIiwidXJsX3JlZ2V4IiwiUmVnRXhwIiwiZW1haWxfcmVnZXgiLCJ0cmltIiwiYWRkRXJyb3IiLCJjbGVhckVycm9yIiwiYWxsX2ZpZWxkcyIsInNsaWNlIiwiY29uY2F0IiwiaW52YWxpZCIsImNyZWF0ZUF0dHJpYnV0ZSIsInRhZ05hbWUiLCJuZXh0U2libGluZyIsInNldEF0dHJpYnV0ZU5vZGUiLCJfdmFsaWQiLCJlcnJvcnNfY291bnQiLCJmb3JtcyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFJQSxTQUFTQSxpQkFBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSUMsV0FBVSxxQ0FGaEgsR0FBSUMsY0FBZSxXQUFlLFFBQVNDLEdBQWlCQyxFQUFRQyxHQUFTLElBQUssR0FBSUMsR0FBSSxFQUFHQSxFQUFJRCxFQUFNRSxPQUFRRCxJQUFLLENBQUUsR0FBSUUsR0FBYUgsRUFBTUMsRUFBSUUsR0FBV0MsV0FBYUQsRUFBV0MsYUFBYyxFQUFPRCxFQUFXRSxjQUFlLEVBQVUsU0FBV0YsS0FBWUEsRUFBV0csVUFBVyxHQUFNQyxPQUFPQyxlQUFlVCxFQUFRSSxFQUFXTSxJQUFLTixJQUFpQixNQUFPLFVBQVVSLEVBQWFlLEVBQVlDLEdBQWlKLE1BQTlIRCxJQUFZWixFQUFpQkgsRUFBWWlCLFVBQVdGLEdBQWlCQyxHQUFhYixFQUFpQkgsRUFBYWdCLEdBQXFCaEIsS0FEamlCa0IsU0FBUUMsSUFBSSxXQUNaLFdBTUksR0FMTUMsR0FBUSxXQUtDLFFBTFRBLEtBWUV0QixnQkFBZ0J1QixLQVpsQkQsRUFNRSxJQUFJRSxHQUFRLEdBQUlDLFNBQVEsU0FBQ0MsRUFBU0MsR0FDOUIsTUFBMkIsV0FBdkJDLFNBQVNDLFdBQWdDSCxRQUM3Q0UsVUFBU0UsaUJBQWlCLG1CQUFvQixXQVMxQyxNQVRnREosUUFF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QnRGLEVBQVF4RSxnQkFBZ0IsbUJBRXpCLENBRUgsR0FBSW1LLEdBQVE1TixTQUFTd04sZ0JBQWdCLGFBQ3JDSSxHQUFNdE4sT0FBUSxFQUNTLFVBQW5CMkgsRUFBUXdGLFNBQ1J4RixFQUFReUYsWUFBWUMsaUJBQWlCQyxHQUNyQzNGLEVBQVF5RixZQUFZakssZ0JBQWdCLGtCQUVwQ3dFLEVBQVEwRixpQkFBaUJDLEdBQ3pCM0YsRUFBUXhFLGdCQUFnQixtQkFLcEMsSUFBSW9LLEdBQWVsTyxLQUFLd0ksS0FBS2hELGlCQUFpQixlQUFldEcsTUFXN0QsT0FWSWdQLEdBQWUsSUFDZnBCLEdBQVEsR0FHUkEsS0FBVSxHQUNVLG1CQUFUL0ksSUFDUEEsRUFBTUMsaUJBSVA4SSxNQXpMVGYsS0ErTEY5TCxFQUFRLEdBQUlDLFNBQVEsU0FBQ0MsRUFBU0MsR0FDOUIsTUFBMkIsV0FBdkJDLFNBQVNDLFdBQWdDSCxRQUM3Q0UsVUFBU0UsaUJBQWlCLG1CQUFvQixXQWUxQyxNQWZnREosUUFHeERGLEdBQU1PLEtBQUssV0FDUCxHQUFJMk4sR0FBUTlOLFNBQVNtRixpQkFBaUIsV0FDbkNxQyxRQUFRQyxLQUFLcUcsRUFBTyxTQUFDM0YsR0FDcEIsR0FBSXVELEdBQVd2RCIsImZpbGUiOiJzY3JpcHRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zb2xlLmxvZygnbGFuZGluZycpO1xuKGZ1bmN0aW9uKCkge1xuICAgIGNsYXNzIExhbmRnaW5nIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmVkID0gZmFsc2U7XG4gICAgICAgICAgICBsZXQgaGVhZGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcicpXG4gICAgICAgICAgICAgICAgLCBjbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG9jaycpO1xuXG4gICAgICAgICAgICAkKFwiLmxhbmRpbmdcIikuZnVsbHBhZ2Uoe1xuICAgICAgICAgICAgICAgIHNlY3Rpb25TZWxlY3RvcjogXCIubGFuZGluZ19fc2VjdGlvblwiLFxuICAgICAgICAgICAgICAgIG5hdmlnYXRpb246IHRydWUsXG4gICAgICAgICAgICAgICAgYWZ0ZXJMb2FkOiB0aGlzLmhpZGVMb2FkZXIuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBhZnRlclJlbmRlcjogdGhpcy5yZWNvdW50U2xpZGVzLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgYWZ0ZXJSZXNpemU6IHRoaXMucmVjb3VudFNsaWRlcy5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIG9uTGVhdmU6IChpbmRleCwgbmV4dEluZGV4LCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRJbmRleCA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXIuY2xhc3NMaXN0LnRvZ2dsZSgnaGVhZGVyX29wZW4nLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGVOYXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfb3BlbicsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93TmF2KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4ID09IDYpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb2NrLmNsYXNzTGlzdC50b2dnbGUoJ2Nsb2NrX3Zpc2libGUnLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb2NrLmNsYXNzTGlzdC50b2dnbGUoJ2Nsb2NrX3Zpc2libGUnLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZm9vdGVyX190b3BcIikuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHRoaXMuc2Nyb2xsVG9Ub3AuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBoaWRlTmF2ICgpIHtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCBcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDBcbiAgICAgICAgICAgICAgICAsIGNvbXBsZXRlOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd05hdiAoKSB7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm5hdiwgXCJmaW5pc2hcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm5hdiwge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmF2LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBoaWRlTG9hZGVyKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZmlyZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZpcmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmF2ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ZwLW5hdicpO1xuICAgICAgICAgICAgdGhpcy5oaWRlTmF2KCk7XG5cbiAgICAgICAgICAgIGxldCBsb2FkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9hZGVyX193cmFwcGVyJyksXG4gICAgICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiA1MDAsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2FkZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChsb2FkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgVmVsb2NpdHkobG9hZGVyLCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIHJlY291bnRTbGlkZXMoKSB7XG4gICAgICAgICAgICBsZXQgY2xvY2sgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2xvY2snKSxcbiAgICAgICAgICAgICAgICBjbG9ja19zbGlkZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mcC1zbGlkZXNDb250YWluZXInKSxcbiAgICAgICAgICAgICAgICB0aXRsZSA9IGNsb2NrX3NsaWRlLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZV9fdGl0bGUnKSxcbiAgICAgICAgICAgICAgICB0ZXh0ID0gY2xvY2tfc2xpZGUucXVlcnlTZWxlY3RvcignLnNsaWRlX190ZXh0JyksXG4gICAgICAgICAgICAgICAgaGVpZ2h0ID0gTWF0aC5taW4oY2xvY2tfc2xpZGUub2Zmc2V0SGVpZ2h0IC0gdGl0bGUub2Zmc2V0SGVpZ2h0IC0gdGV4dC5vZmZzZXRIZWlnaHQgKyA5MCwgNzAyKSxcbiAgICAgICAgICAgICAgICBwZXJjID0gaGVpZ2h0IC8gNzAyO1xuXG4gICAgICAgICAgICBpZiAoY2xvY2tfc2xpZGUub2Zmc2V0V2lkdGggPD0gNzUwKSB7XG4gICAgICAgICAgICAgICAgY2xvY2suc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSAnc2NhbGUoJyArIHBlcmMgKyAnKSc7XG4gICAgICAgICAgICAgICAgY2xvY2suc3R5bGUubWFyZ2luID0gXCIwIDAgMCAtXCIgKyAoY2xvY2sub2Zmc2V0V2lkdGggKiBwZXJjKSAqIDAuMzMgKyBcInB4XCI7XG4gICAgICAgICAgICAgICAgLy8gY2xvY2suc3R5bGUuYmFja2dyb3VuZCA9ICdyZWQnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbG9jay5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIHNjcm9sbFRvVG9wKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5tb3ZlVG8oMSwgMCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3IExhbmRnaW5nO1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc29sZS5sb2coJ2xheW91dCcpO1xuKGZ1bmN0aW9uKCkge1xuICAgIHdpbmRvdy5tb2JpbGVBbmRUYWJsZXRjaGVjayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgY2hlY2sgPSBmYWxzZTtcbiAgICAgICAgKGZ1bmN0aW9uKGEpIHtcbiAgICAgICAgICAgIGlmICgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vfGFuZHJvaWR8aXBhZHxwbGF5Ym9va3xzaWxrL2kudGVzdChhKSB8fCAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaS50ZXN0KGEuc3Vic3RyKDAsIDQpKSkgY2hlY2sgPSB0cnVlXG4gICAgICAgIH0pKG5hdmlnYXRvci51c2VyQWdlbnQgfHwgbmF2aWdhdG9yLnZlbmRvciB8fCB3aW5kb3cub3BlcmEpO1xuICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgfTtcblxuICAgIHdpbmRvdy5pc01vYmlsZSA9IHtcbiAgICAgICAgQW5kcm9pZDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gL0FuZHJvaWQvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBCbGFja0JlcnJ5OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvQmxhY2tCZXJyeS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGlPUzogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gL2lQaG9uZXxpUGFkfGlQb2QvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBXaW5kb3dzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvSUVNb2JpbGUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBhbnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIChpc01vYmlsZS5BbmRyb2lkKCkgfHwgaXNNb2JpbGUuQmxhY2tCZXJyeSgpIHx8IGlzTW9iaWxlLmlPUygpIHx8IGlzTW9iaWxlLldpbmRvd3MoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY2xhc3MgTGF5b3V0IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTdGFydCBpbml0aWFsaXphdGlvbiBvbiBkb21sb2FkXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQoKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmlzTW9iaWxlLkFuZHJvaWQoKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdhbmRyb2lkJyk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5pc01vYmlsZS5pT1MoKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdpb3MnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93Lm1vYmlsZUFuZFRhYmxldGNoZWNrKCkpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgndW5rbm93bi1tb2JpbGUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2Rlc2t0b3AnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCdhbmRyb2lkJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmV3IExheW91dDtcbn0pKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnNvbGUubG9nKCdNZW51Jyk7XG4oZnVuY3Rpb24gKCkge1xuICAgIGNsYXNzIE1lbnUge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN0YXJ0IGluaXRpYWxpemF0aW9uIG9uIGRvbWxvYWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgICAgICAgICBsZXQgcmVhZHkgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+e1xuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9IFwibG9hZGluZ1wiKSByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpPT4gcmVzb2x2ZSgpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVhZHkudGhlbih0aGlzLmluaXQuYmluZCh0aGlzKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICovXG4gICAgICAgIGluaXQgKCkge1xuICAgICAgICAgICAgbGV0IGJhY2tfYnV0dG9ucyA9ICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9naW5fX2JhY2snKVxuICAgICAgICAgICAgICAgICwgbG9naW5fYnV0dG9ucyA9ICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubG9naW5fX2xvZ2luLWJ1dHRvbiwgLmxvZ2luX3N1Y2Nlc3MgLmxvZ2luX19zdWJtaXQnKVxuICAgICAgICAgICAgICAgICwgbW9iaWxlX3BvcHVwX2J1dHRvbnMgPSAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubWVudV9faW50ZXJwcmV0ZXIsIC5oZWFkZXJfX2ludGVycHJldGVyJyk7XG5cbiAgICAgICAgICAgIHRoaXMubWVudV9wb3B1cF9vcGVuID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHRoaXMubG9naW5fYnV0dG9uID0gICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyX2J1dHRvbiA9ICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tZW51X19yZWdpc3RlcicpO1xuXG4gICAgICAgICAgICB0aGlzLnN0ZXAxID0gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWdpc3Rlci1zdGVwLTEnKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDFfZm9ybSA9ICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMSBmb3JtLmxvZ2luX19mb3JtJyk7XG4gICAgICAgICAgICB0aGlzLnN0ZXAyID0gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWdpc3Rlci1zdGVwLTInKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDJfZm9ybSA9ICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMiBmb3JtLmxvZ2luX19mb3JtJyk7XG5cbiAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwID0gICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX21vYmlsZScpO1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXBfY2xvc2UgPSAgICAgICB0aGlzLm1vYmlsZV9wb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJyk7XG5cbiAgICAgICAgICAgIHRoaXMud3JhcHBlciA9ICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX3dyYXBwZXInKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyX3JlZ2lzdGVyX2J1dHRvbiA9ICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fbGlua19yZWdpc3RlcicpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJfbG9naW5fYnV0dG9uID0gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19saW5rX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5X2J1dHRvbiA9ICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9fcGFzc3dvcmQtcmVjb3ZlcnknKTtcbiAgICAgICAgICAgIHRoaXMubGlnaHRib3ggPSAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keT4ubGlnaHRib3gnKTtcbiAgICAgICAgICAgIHRoaXMubG9naW5fcG9wdXAgPSAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX2xvZ2luJyk7XG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5ID0gICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9yZWNvdmVyeScpO1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9ICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fcGFzc3dvcmQnKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfZm9ybSA9ICAgICAgICAgICAgdGhpcy5yZWNvdmVyeS5xdWVyeVNlbGVjdG9yKCcubG9naW5fX2Zvcm0nKTtcbiAgICAgICAgICAgIHRoaXMucGFzc3dvcmRfZm9ybSA9ICAgICAgICAgICAgdGhpcy5wYXNzd29yZC5xdWVyeVNlbGVjdG9yKCcubG9naW5fX2Zvcm0nKTtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JfbWVzc2FnZSA9ICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX2Vycm9yJyk7XG4gICAgICAgICAgICB0aGlzLmVtYWlsID0gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9lbWFpbCcpO1xuICAgICAgICAgICAgdGhpcy5zdWNjZXNzID0gICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fc3VjY2VzcycpO1xuXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fb3BlbicpO1xuICAgICAgICAgICAgdGhpcy5sYXN0ID0gW107XG5cbiAgICAgICAgICAgIHRoaXMubG9naW5fYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuTG9naW5Gb3JtLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5yZWNvdmVyeV9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5SZWNvdmVyeS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMubGlnaHRib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlQWxsLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlcl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5SZWdpc3Rlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyX2xvZ2luX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlbkxvZ2luT3V0ZXIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcl9yZWdpc3Rlcl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Mb2dpbk91dGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXBfY2xvc2UuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlTW9iaWxlUG9wdXAuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNlbmREYXRhLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZF9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc2VuZERhdGEuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnN0ZXAxX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5vcGVuTmV4dC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDJfZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnNlbmREYXRhLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5yZXBvc1BvcHVwLmJpbmQodGhpcykpO1xuXG4gICAgICAgICAgICAkKCcubG9naW4gc2VsZWN0Jykuc2VsZWN0MigpO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobW9iaWxlX3BvcHVwX2J1dHRvbnMsIChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Nb2JpbGVQb3B1cC5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoYmFja19idXR0b25zLCAoYnV0dG9uKSA9PiB7XG4gICAgICAgICAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5nb2JhY2suYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGxvZ2luX2J1dHRvbnMsIChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Mb2dpbklubmVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHRoaXMuV2ViUlRDU3VwcG9ydCA9ICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCduby1wZWVyY29ubmVjdGlvbicpO1xuXG5cbiAgICAgICAgICAgIGlmKCF0aGlzLldlYlJUQ1N1cHBvcnQpIHtcblxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtLmxvZ2luX19mb3JtIGlucHV0LCBmb3JtLmxvZ2luX19mb3JtIGJ1dHRvbiwgZm9ybS5sb2dpbl9fZm9ybSBzZWxlY3QnKSwgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiLFwiZGlzYWJsZWRcIik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0ubG9naW5fX2Zvcm0nKSwgKGZvcm0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KT0+e1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9ybS5jbG9zZXN0KCcubG9naW4nKS5xdWVyeVNlbGVjdG9yKCcucG9wdXBfYnJvd3NlcicpLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnBvcHVwX2Jyb3dzZXInKSwgKHBvcHVwKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1BvcHVwKHBvcHVwKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG9wZW5OZXh0IChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0ZXAxX2Zvcm0udmFsaWRhdGUoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5zdGVwMik7XG4gICAgICAgIH1cblxuICAgICAgICByZXBvc1BvcHVwIChldmVudCkge1xuICAgICAgICAgICAgaWYoIXRoaXMubWVudV9wb3B1cF9vcGVuKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vYmlsZV9wb3B1cC5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoJ3RyYW5zZm9ybScpXSA9IFwidHJhbnNsYXRlWShcIiArIHRoaXMubW9iaWxlX3BvcHVwLm9mZnNldEhlaWdodCArIFwicHgpXCI7XG4gICAgICAgIH1cblxuICAgICAgICBjbG9zZU1vYmlsZVBvcHVwICgpIHtcbiAgICAgICAgICAgIGlmKCF0aGlzLm1lbnVfcG9wdXBfb3Blbil7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tZW51X3BvcHVwX29wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXAsIFwic3RvcFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwLCB7dHJhbnNsYXRlWTogMH0sIDI1MCk7XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbiwgXCJzdG9wXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICAsIGJlZ2luOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVuTW9iaWxlUG9wdXAgKCkge1xuICAgICAgICAgICAgaWYodGhpcy5tZW51X3BvcHVwX29wZW4pe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubWVudV9wb3B1cF9vcGVuID0gdHJ1ZTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXAsIFwic3RvcFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwLCB7dHJhbnNsYXRlWTogdGhpcy5tb2JpbGVfcG9wdXAub2Zmc2V0SGVpZ2h0ICsgXCJweFwifSwgMjUwKTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLCBcInN0b3BcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24sIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvd1BvcHVwIChwb3B1cCkge1xuICAgICAgICAgICAgaWYgKHBvcHVwLnNob3cgIT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgICAgICBwb3B1cC5zaG93KCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5zaG93UG9wdXAuYmluZCh0aGlzLCBwb3B1cCksIDUwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2Nyb2xsIHRvIGZpcnN0IHNsaWRlIGFuZCBvcGVuIGxvZ2luIGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIG9wZW5Mb2dpbk91dGVyIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2UubW92ZVRvKDEsIDApO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMubG9naW5fYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICB9LCA4MDApXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNjcm9sbCB0byBmaXJzdCBzbGlkZSBhbmQgb3BlbiByZWdpc3RlciBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuUmVnaXN0ZXJPdXRlciAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLm1vdmVUbygxLCAwKTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyX2J1dHRvbi5jbGljaygpO1xuICAgICAgICAgICAgfSwgODAwKVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTZW5kIHJlZ2lzdHJhdGlvbiBkYXRhIGFuZCBzaG93IG1lc3NhZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNlbmREYXRhIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGxldCBmb3JtID0gZXZlbnQuY3VycmVudFRhcmdldDtcblxuICAgICAgICAgICAgaWYgKGZvcm0udmFsaWRhdGUoKSA9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBsZXQgRE9ORSA9IDRcbiAgICAgICAgICAgICAgICAsIE9LID0gMjAwXG4gICAgICAgICAgICAgICAgLCBtZXNzYWdlXG4gICAgICAgICAgICAgICAgLCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKVxuICAgICAgICAgICAgICAgICwgbG9hZGVkID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB4aHIub3BlbignUE9TVCcsIGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSk7XG4gICAgICAgICAgICAgICAgICAgIHhoci5zZW5kKG5ldyBGb3JtRGF0YShmb3JtKSk7XG4gICAgICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IERPTkUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY292ZXJ5X2Zvcm0ucmVzZXQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gT0spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlOiBwYXJzZUludCh4aHIuc3RhdHVzLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB4aHIuc3RhdHVzVGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAoZm9ybS5oYXNBdHRyaWJ1dGUoJ2RhdGEtY2hlY2snKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5zaG93Q2hlY2tNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IHRoaXMuc2hvd1N1Y2Nlc3NNZXNzYWdlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbG9hZGVkLnRoZW4obWVzc2FnZSkuY2F0Y2godGhpcy5zaG93RXJyb3JNZXNzYWdlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgICAgIC8vIGxvYWRlZC50aGVuKG1lc3NhZ2UpLmNhdGNoKG1lc3NhZ2UpO1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3I6ICcsIGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgY2hlY2sgZW1haWwgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd0NoZWNrTWVzc2FnZSAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMuZW1haWwpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IHN1Y2Nlc3MgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1N1Y2Nlc3NNZXNzYWdlICgpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5zdWNjZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBsb2dpblxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbkxvZ2luSW5uZXIgKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLmxvZ2luX3BvcHVwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICBzaG93RXJyb3JNZXNzYWdlIChyZWFzb24pIHtcbiAgICAgICAgICAgIHRoaXMubGFzdCA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cocmVhc29uLmNvZGUsICdSZXNwb25jZSBzdGF0dXMgY29kZTogJyArIHJlYXNvbi5jb2RlICsgJy4gJyArIHJlYXNvbi5tZXNzYWdlICsgJy4nKTtcbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5lcnJvcl9tZXNzYWdlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiBsYXN0IHBhZ2VcbiAgICAgICAgICovXG4gICAgICAgIGdvYmFjayAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgZW1haWwgc2VudCB3YXJuaW5nXG4gICAgICAgICAqL1xuICAgICAgICBlbWFpbEhhdmVTZW5kICgpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5lbWFpbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gcmVnaXN0ZXIgZm9ybVxuICAgICAgICAgKi9cbiAgICAgICAgb3BlblJlZ2lzdGVySW5uZXIgKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnN0ZXAxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiByZWdpc3RlciBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuUmVnaXN0ZXIgKCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgbGV0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMuc3RlcDEsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuc3RlcDE7XG5cbiAgICAgICAgICAgIHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saWdodGJveC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5saWdodGJveCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIHJlY292ZXJ5IGZvcm1zXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuUmVjb3ZlcnkgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYoIXRoaXMuV2ViUlRDU3VwcG9ydCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5yZWNvdmVyeSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gcmVjb3ZlcnkgZm9ybXNcbiAgICAgICAgICogQHBhcmFtIGZvcm0ge25vZGV9IEZvcm0geW91IHdhbnQgdG8gb3BlblxuICAgICAgICAgKiBAcGFyYW0gYmFjayB7bm9kZX0gRm9ybSB3aGljaCB5b3Ugd2FudCB0byBvcGVuIHdoZW4gdXNlciBwcmVzcyBiYWNrLCBieSBkZWZhdWx0IOKAlMKgbGFzdCBmb3JtIG9wZW5lZFxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbkZvcm0gKHBvcHVwLCBkb250X3NhdmUpIHtcblxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgbGV0IGZvcm0gPSB0aGlzLmN1cnJlbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xuICAgICAgICAgICAgaWYgKGZvcm0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9Pntmb3JtLmNsZWFyKCk7fSwgMjUwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcG9wdXAgPSB0aGlzLmxhc3QucG9wKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvbnRfc2F2ZSAhPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0LnB1c2godGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogLSB0aGlzLmN1cnJlbnQub2Zmc2V0V2lkdGggKyBcInB4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmN1cnJlbnQsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHBvcHVwLCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBwb3B1cDtcblxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBDbG9zZSBhbGwgZm9ybXNcbiAgICAgICAgICovXG4gICAgICAgIGNsb3NlQWxsICgpIHtcblxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyh0cnVlKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcodHJ1ZSk7XG5cbiAgICAgICAgICAgIGxldCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IC0gdGhpcy5jdXJyZW50Lm9mZnNldFdpZHRoICsgXCJweFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5jdXJyZW50LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuXG4gICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlnaHRib3guc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5saWdodGJveCwgcHJvcHMsIG9wdGlvbnMpO1xuXG4gICAgICAgICAgICB0aGlzLmNsZWFyQWxsKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjbGVhckFsbCAoKSB7XG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybScpLCAoZm9ybSkgPT4ge1xuICAgICAgICAgICAgICAgIGZvcm0uY2xlYXIoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAkKCcubG9naW4gc2VsZWN0Jykuc2VsZWN0MihcImRlc3Ryb3lcIik7XG4gICAgICAgICAgICAkKCcubG9naW4gc2VsZWN0Jykuc2VsZWN0MigpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGxvZ2luIHBvcHVwXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuTG9naW5Gb3JtIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgbGV0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubG9naW5fcG9wdXAsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMubG9naW5fcG9wdXA7XG5cbiAgICAgICAgICAgIHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBiZWdpbjogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saWdodGJveC5zdHlsZS5kaXNwbGF5ID0gXCJibG9ja1wiO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5saWdodGJveCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmV3IE1lbnU7XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zb2xlLmxvZygncG9wdXAnKTtcbihmdW5jdGlvbiAoKSB7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3MgUG9wdXBcbiAgICAgKi9cbiAgICBjbGFzcyBQb3B1cCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yIChwb3B1cCkge1xuICAgICAgICAgICAgdGhpcy5wb3B1cCA9IHBvcHVwO1xuICAgICAgICAgICAgcG9wdXAucXVlcnlTZWxlY3RvcignLnBvcHVwX19jbG9zZScpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuY2xvc2UgPSB0aGlzLmNsb3NlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnBvcHVwLm9wZW4gPSB0aGlzLm9wZW4uYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc2hvdyA9IHRoaXMuc2hvdy5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuamFtcGluZyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hvdyAoKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyldID0gXCJyb3RhdGVYKDApXCI7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBoaWRlICgpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoJ3RyYW5zZm9ybScpXSA9IFwicm90YXRlWCgxODBkZWcpXCI7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwgXCJzdG9wXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2xvc2UgKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuamFtcGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghdGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCBcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtcbiAgICAgICAgICAgICAgICByb3RhdGVYOiBcIjEyMGRlZ1wiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMFxuICAgICAgICAgICAgICAgICwgYmVnaW46ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgb3BlbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5qYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5qdW1wKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5qYW1waW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge1xuICAgICAgICAgICAgICAgIHJvdGF0ZVg6IFwiMGRlZ1wiXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMFxuICAgICAgICAgICAgICAgICwgYmVnaW46ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIyMGRlZ1wifSwgMTUwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIDEyNSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIxMGRlZ1wifSwgMjAwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjoxNzVcbiAgICAgICAgICAgICAgICAsIGNvbXBsZXRlOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5qYW1waW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGp1bXAgKCkge1xuICAgICAgICAgICAgdGhpcy5qYW1waW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMzVkZWdcIn0sIDE1MCk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIwZGVnXCJ9LCAxMjUpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMjBkZWdcIn0sIDIwMCk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIwZGVnXCJ9LCAxNzUpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMTVkZWdcIn0sIDI1MCk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIwZGVnXCJ9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDIyNVxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmphbXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICB9XG5cblxuICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlICE9IFwibG9hZGluZ1wiKSByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKT0+IHJlc29sdmUoKSk7XG4gICAgfSk7XG5cbiAgICByZWFkeS50aGVuKCgpPT57XG4gICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfYnJvd3NlcicpLCAocG9wdXApID0+IHtcbiAgICAgICAgICAgIG5ldyBQb3B1cChwb3B1cCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBAY2xhc3NkZXNjIENsYXNzIHJlcHJlc2VudGluZyBmb3JtIHZhbGlkYXRpb25cbiAgICAgKiBAY2xhc3NcbiAgICAgKi9cblxuICAgIGNsYXNzIFZhbGlkYXRpb24ge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIEFkZGluZyBldmVudHMgYW5kIHByb3BlcnRpZXNcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3Rvcihmb3JtKSB7XG4gICAgICAgICAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgICAgICAgICAgZm9ybS5zZXRBdHRyaWJ1dGUoXCJub3ZhbGlkYXRlXCIsIFwibm92YWxpZGF0ZVwiKTtcbiAgICAgICAgICAgIGZvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy52YWxpZGF0ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIGZvcm0udmFsaWRhdGUgPSB0aGlzLnZhbGlkYXRlLmJpbmQodGhpcyk7XG4gICAgICAgICAgICBmb3JtLmNsZWFyID0gdGhpcy5jbGVhci5iaW5kKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2VzID0ge1xuICAgICAgICAgICAgICAgIGVuOiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcIlJlcXVpcmVkIGZpZWxkXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlbWFpbDogXCJXcm9uZyBlbWFpbCBmb3JtYXRcIlxuICAgICAgICAgICAgICAgICAgICAsIGVxdWFsOiBcIlBhc3N3b3JkIGZpZWxkcyBzaG91bGQgYmUgZXF1YWxcIlxuICAgICAgICAgICAgICAgICAgICAsIHVybDogXCJXcm9uZyB1cmwgZm9ybWF0XCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBydToge1xuICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogXCLQn9C+0LvQtSDQvtCx0Y/Qt9Cw0YLQtdC70YzQvdC+INC00LvRjyDQt9Cw0L/QvtC70L3QtdC90LjRj1wiXG4gICAgICAgICAgICAgICAgICAgICwgZW1haWw6IFwi0J/RgNC+0LLQtdGA0YzRgtC1INGE0L7RgNC80LDRgiBlbWFpbFwiXG4gICAgICAgICAgICAgICAgICAgICwgZXF1YWw6IFwi0J/QsNGA0L7Qu9C4INC00L7Qu9C20L3RiyDRgdC+0LLQv9Cw0LTQsNGC0YxcIlxuICAgICAgICAgICAgICAgICAgICAsIHVybDogXCLQn9GA0L7QstC10YDRjNGC0LUg0YTQvtGA0LzQsNGCIFVSTFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBSZXNldCBmb3JtIGFuZCBjbGVhciBlcnJvcnNcbiAgICAgICAgICovXG4gICAgICAgIGNsZWFyICgpIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIGxldCBlcnJvcnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybS1lcnJvcicpLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdbZGF0YS12YWxpZF0sIFtkYXRhLWludmFsaWRdJyk7XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZXJyb3JzLCAoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlcnJvcik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoZmllbGRzLCAoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgZmllbGQucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBlcnJvciBtZXNzYWdlIGFmdGVyIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gZWxlbWVudCwgYWZ0ZXIgd2hpY2ggd2Ugd2lsbCBhZGQgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAtIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cHBlIC0gZXJyb3IgdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgYWRkRXJyb3IoZWxlbWVudCwgbWVzc2FnZSwgdHlwZSkge1xuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWVycm9yW2RhdGEtdHlwZT1cIicgKyB0eXBlICsgJ1wiXScpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdQJyk7XG4gICAgICAgICAgICBlcnJvci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtZXNzYWdlKSk7XG4gICAgICAgICAgICBlcnJvci5jbGFzc0xpc3QuYWRkKCdmb3JtLWVycm9yJyk7XG4gICAgICAgICAgICBlcnJvci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScsIHR5cGUpO1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIGVycm9yIG1lc3NhZ2Ugb2Ygc29tZSB0eXBlIGFmdGVyIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gZWxlbWVudCwgYWZ0ZXIgd2hpY2ggZXJyb3IgbWVzc2FnZSBpc1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwcGUgLSBlcnJvciB0eXBlXG4gICAgICAgICAqL1xuICAgICAgICBjbGVhckVycm9yKGVsZW1lbnQsIHR5cGUpIHtcblxuICAgICAgICAgICAgbGV0IGVyciA9IGVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZm9ybS1lcnJvcltkYXRhLXR5cGU9XCInICsgdHlwZSArICdcIl0nKTtcbiAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYWxpZGF0ZSBmb3JtXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gc3VibWl0IGV2ZW50XG4gICAgICAgICAqIEB0b2RvIEltcGxlbWVudCBsb2dpbiB2YWxpZGF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZShldmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPSBcInVuZGVmaW5lZFwiICYmICFldmVudC5jdXJyZW50VGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1yZWxvYWQnKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWxpZCA9IHRydWUsXG4gICAgICAgICAgICAgICAgbmV4dCA9IG51bGwsXG4gICAgICAgICAgICAgICAgZXF1YWxfZmllbGRzID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWVxdWFsXScpLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbcmVxdWlyZWRdJyksXG4gICAgICAgICAgICAgICAgdXJsX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwidXJsXCJdJyksXG4gICAgICAgICAgICAgICAgZW1haWxfZmllbGRzID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJlbWFpbFwiXScpLFxuICAgICAgICAgICAgICAgIHVybF9yZWdleCA9IG5ldyBSZWdFeHAoXCJeKGh0dHB8aHR0cHN8ZnRwKVxcOi8vKFthLXpBLVowLTlcXC5cXC1dKyhcXDpbYS16QS1aMC05XFwuJmFtcDslXFwkXFwtXSspKkApKigoMjVbMC01XXwyWzAtNF1bMC05XXxbMC0xXXsxfVswLTldezJ9fFsxLTldezF9WzAtOV17MX18WzEtOV0pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFswLTldKXwoW2EtekEtWjAtOVxcLV0rXFwuKSpbYS16QS1aMC05XFwtXStcXC4oY29tfGVkdXxnb3Z8aW50fG1pbHxuZXR8b3JnfGJpenxhcnBhfGluZm98bmFtZXxwcm98YWVyb3xjb29wfG11c2V1bXxbYS16QS1aXXsyfSkpKFxcOlswLTldKykqKC8oJHxbYS16QS1aMC05XFwuXFwsXFw/XFwnXFxcXFxcKyZhbXA7JVxcJCNcXD1+X1xcLV0rKSkqJFwiLCBcImlcIiksXG4gICAgICAgICAgICAgICAgZW1haWxfcmVnZXggPSBuZXcgUmVnRXhwKFwiXihbYS16QS1aMC05X1xcLlxcLV0pK1xcQCgoW2EtekEtWjAtOVxcLV0pK1xcLikrKFthLXpBLVowLTldezIsNH0pKyRcIik7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIGVxdWFsIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGVxdWFsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXF1YWwgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZXF1YWxcIikpO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlLnRyaW0oKSAhPSBlcXVhbC52YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0uZXF1YWwsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJlcXVpcmVkX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0ucmVxdWlyZWQsIFwicmVxdWlyZWRcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdyZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayB1cmwgZmllbGRzICovXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodXJsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKGVsZW1lbnQudmFsdWUudHJpbSgpLmxlbmd0aCA+IDApICYmICh1cmxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS51cmwsICd1cmwnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRXJyb3IoZWxlbWVudCwgJ3VybCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayBlbWFpbCBmaWVsZHMgKi9cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChlbWFpbF9maWVsZHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKChlbGVtZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPiAwKSAmJiAoZW1haWxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS5lbWFpbCwgJ2VtYWlsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdlbWFpbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGxldCBhbGxfZmllbGRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZXF1YWxfZmllbGRzKS5jb25jYXQoXG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocmVxdWlyZWRfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh1cmxfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbWFpbF9maWVsZHMpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoYWxsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyID0gZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnZhbGlkID0gZG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKFwiZGF0YS1pbnZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkLnZhbHVlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09IFwiU0VMRUNUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcuc2V0QXR0cmlidXRlTm9kZShpbnZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5vZGUoaW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWQgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJTRUxFQ1RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5uZXh0U2libGluZy5zZXRBdHRyaWJ1dGVOb2RlKHZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTm9kZSh2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVycm9yc19jb3VudCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9lcnJvcicpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChlcnJvcnNfY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xuXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHJlc29sdmUoKSk7XG4gICAgfSk7XG5cbiAgICByZWFkeS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG4gICAgICAgIFtdLmZvckVhY2guY2FsbChmb3JtcywgKGZvcm0pID0+IHtcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uKGZvcm0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==