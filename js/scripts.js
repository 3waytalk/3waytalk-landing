"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();!function(){var t=function(){function t(e){_classCallCheck(this,t),this.alert=e,this.alert.querySelector(".alert__close").addEventListener("click",this.close.bind(this)),this.alert.close=this.close.bind(this),this.alert.open=this.open.bind(this),this.status=!1}return _createClass(t,[{key:"close",value:function(){var t=this;this.status&&(Velocity(this.alert,"finish"),Velocity(this.alert,{translateY:0},{duration:250,complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;this.status||(Velocity(this.alert,"finish"),Velocity(this.alert,{translateY:this.alert.offsetHeight+"px"},{duration:250,complete:function(){t.status=!0}}))}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".alert"),function(e){new t(e),e.classList.contains("alert_open")&&e.open()})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){this.map=document.querySelector(".contact__map"),null!=this.map&&(this.map.style.height=Math.max(document.documentElement.clientHeight,window.innerHeight||0)-document.querySelector(".contact__wrapper").offsetHeight-document.querySelector(".footer").offsetHeight-document.querySelector(".header").offsetHeight-52+"px",window.addEventListener("resize",this.resize.bind(this)))}},{key:"resize",value:function(){null!=this.map&&(this.map.style.height=Math.max(document.documentElement.clientHeight,window.innerHeight||0)-document.querySelector(".contact__wrapper").offsetHeight-document.querySelector(".footer").offsetHeight-document.querySelector(".header").offsetHeight-52+"px")}}]),e}();new e}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}return function(t,i,s){return i&&e(t.prototype,i),s&&e(t,s),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(null!=document.querySelector(".landing")){this.fired=!1,this.tablet=1200,this.mobile=750,this.min_height=250,this.meta=document.querySelector("meta[name='viewport']"),this.onResize();var t=document.querySelector(".header"),i=document.querySelector(".clock");document.querySelector(".slide_main");window.requestAnimFrame=window.requestAnimationFrame,$(".landing").fullpage({sectionSelector:".landing__section",navigation:!0,afterLoad:this.hideLoader.bind(this),afterRender:this.recountSlides.bind(this),afterResize:this.recountSlides.bind(this),onLeave:function(s,o,n){1==o?(t.classList.toggle("header_open",!1),e.hideNav()):(t.classList.toggle("header_open",!0),e.showNav()),6==o?i.classList.toggle("clock_visible",!0):i.classList.toggle("clock_visible",!1)}}),document.querySelector(".footer__top").addEventListener("click",this.scrollToTop.bind(this)),window.addEventListener("resize",this.onResize.bind(this));var s=document.querySelector(".landing__section.active");null!=s&&(s.classList.toggle("active_moment",!0),s.classList.toggle("active",!1),setTimeout(function(){s.classList.toggle("active_moment",!1),s.classList.toggle("active",!0)},0))}}},{key:"onResize",value:function(){Math.max(document.documentElement.clientHeight,window.innerHeight||0)>420&&Math.max(document.documentElement.clientWidth,window.innerWidth||0)<500?this.meta.setAttribute("content","width=400"):this.meta.setAttribute("content","width=device-width, initial-scale=1.0")}},{key:"hideNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:0},{duration:300,complete:function(){e.nav.style.display="none"}})}},{key:"showNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:1},{duration:300,begin:function(){e.nav.style.display="block"}})}},{key:"hideLoader",value:function(){if(this.onResize(),!this.fired){this.fired=!0,this.nav=document.getElementById("fp-nav"),this.hideNav(),[].forEach.call(document.querySelectorAll(".slide__resizable, .slide__centred"),function(e){e.setAttribute("data-height",e.offsetHeight),e.setAttribute("data-width",e.offsetWidth)});var e=document.querySelector(".loader__wrapper"),t={opacity:0},i={duration:500,complete:function(){e.parentNode.removeChild(e)}};Velocity(e,t,i)}}},{key:"recountSlides",value:function(){var e=this;this.onResize();var t=document.querySelectorAll(".slide__resizable"),i=document.querySelector(".slide__centred"),s=document.querySelectorAll(".steps__step"),o=document.querySelector(".slide_service"),n=document.querySelector(".slide__illustration"),l=document.querySelector(".slide_main"),r=document.querySelector(".shema"),a=document.querySelector(".header").offsetHeight,d=document.querySelector(".footer").offsetHeight,c=(r.closest(".slide__details"),l.querySelector(".slide__phones")),h=l.querySelector(".slide__phone"),u=void 0,f=void 0,m=void 0,v=void 0,y=20,g=void 0,_=void 0,p=1,b=1,L=1,S=void 0,w=void 0,q=void 0,z=void 0,M=void 0,A=void 0,x=void 0,k=void 0,H=void 0,C=void 0,E=void 0,I=void 0,W=void 0,R=void 0;g=l.querySelector(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,S=l.querySelector(".slide__header"),l.style.backgroundSize="auto "+u+"px",f>750?(W=0,_=550):(W=100,_=480),v=u-W-S.offsetHeight,v>=200&&f>750?(c.style.height=Math.min(v,_)+"px",c.style.marginLeft=.1*-Math.min(v,_)+"px",c.style.visibility="visible"):200>v?c.style.visibility="hidden":c.removeAttribute("style"),750>=f&&(h.style.height=v+"px"),g=o.querySelector(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,S=o.querySelector(".slide__header"),H=Math.min(g.offsetHeight,parseInt(g.style.height,10))-S.offsetHeight-d-a,n.style.height=H+"px",C=700,E=570,I=1.2*f,R=E*I/C,H>R?(n.classList.toggle("slide__illustration_hidden",!1),n.style.backgroundPosition="50% 100%"):370>H?n.classList.toggle("slide__illustration_hidden",!0):(n.classList.toggle("slide__illustration_hidden",!1),n.style.backgroundPosition="50% 0"),i.removeAttribute("style"),[].forEach.call(s,function(e){e.removeAttribute("style")}),Math.max(document.documentElement.clientHeight,window.innerHeight||0)>480&&(w=i.closest(".slide"),g=i.closest(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,k=parseInt(i.getAttribute("data-height"),10),f>1220?(x=1230,z=170):f>750&&1220>=f?(x=1050,z=170):(x=400,k=900,z=0),v=u-a,m=f-40,b=v/k,L=m/x,p=Math.min(Math.min(b,L),1),M=0,A=0,750>f?(p=v/620,i.style[Modernizr.prefixed("transform")]="translateX(-50%) scale("+p+")"):(x>m&&(A=-(x-f)/2),1>p&&([].forEach.call(s,function(e){e.style[Modernizr.prefixed("transform")]="scale("+Math.min(1/p*.8,2)+")"}),A+=30),A+="px",i.style[Modernizr.prefixed("transform")]="translateX("+A+") translateY("+M+") scale("+p+")")),[].forEach.call(t,function(t){w=t.closest(".slide"),S=t.closest(".slide__details").querySelector(".slide__header"),g=t.closest(".fp-tableCell"),u=Math.min(g.offsetHeight,parseInt(g.style.height,10)),f=g.offsetWidth,k=parseInt(t.getAttribute("data-height"),10),x=parseInt(t.getAttribute("data-width"),10),b=v/k,L=m/x,p=Math.min(b,L),f>e.mobile?(v=u-a-y,m=f/2-40,b=v/k,L=m/x,p=Math.min(b,L),v<e.min_height?w.classList.add("slide_hide-resizable"):1>p?(w.classList.remove("slide_hide-resizable"),t.style[Modernizr.prefixed("transform")]="scale("+p+")",w.classList.contains("slide_right")?(q=parseInt(t.getAttribute("data-width"),10)*p,S.style.borderLeftWidth=q+"px",f>e.tablet&&(t.style.marginRight=S.offsetWidth/2-q+"px")):(q=parseInt(t.getAttribute("data-width"),10)*p,S.style.borderRightWidth=q+"px",f>e.tablet&&(t.style.marginLeft=S.offsetWidth/2-q+"px"))):(w.classList.remove("slide_hide-resizable"),t.removeAttribute("style"),S.removeAttribute("style"))):(v=u-a-S.offsetHeight-60,m=f-40,b=v/k,L=m/x,p=Math.min(b,L),x>m?t.style.marginLeft=-((x-m)/2-20)+"px":t.style.marginLeft="auto",200>v?(console.log("hidding"),w.classList.add("slide_hide-resizable")):1>p?(w.classList.remove("slide_hide-resizable"),t.style[Modernizr.prefixed("transform")]="scale("+p+")"):(w.classList.remove("slide_hide-resizable"),t.removeAttribute("style"),S.removeAttribute("style")))}),this.onResize()}},{key:"scrollToTop",value:function(e){e.preventDefault(),$.fn.fullpage.moveTo(1,0)}}]),e}();new e}();
"use strict";function _classCallCheck(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function i(i,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(i,o.key,o)}}return function(e,n,o){return n&&i(e.prototype,n),o&&i(e,o),e}}();!function(){window.mobileAndTabletcheck=function(){var i=!1;return function(e){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(i=!0)}(navigator.userAgent||navigator.vendor||window.opera),i},window.isMobile={Android:function(){return/Android/i.test(navigator.userAgent)},BlackBerry:function(){return/BlackBerry/i.test(navigator.userAgent)},iOS:function(){return/iPhone|iPad|iPod/i.test(navigator.userAgent)},Windows:function(){return/IEMobile/i.test(navigator.userAgent)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Windows()}};var i=function(){function i(){_classCallCheck(this,i);var e=new Promise(function(i,e){return"loading"!=document.readyState?i():void document.addEventListener("DOMContentLoaded",function(){return i()})});e.then(this.init.bind(this))}return _createClass(i,[{key:"init",value:function(){window.isMobile.Android()?document.body.parentNode.classList.add("android"):window.isMobile.iOS()?document.body.parentNode.classList.add("ios"):window.mobileAndTabletcheck()?document.body.parentNode.classList.add("unknown-mobile"):document.body.parentNode.classList.add("desktop")}}]),i}();new i}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}();!function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;if(null!=document.querySelector(".login")){var t=document.querySelectorAll(".login__back"),o=document.querySelectorAll(".login__login-button, .login_success .login__submit"),i=document.querySelectorAll(".menu__interpreter, .header__interpreter");this.menu_popup_open=!1,this.login_button=document.querySelector(".menu__login"),this.register_button=document.querySelector(".menu__register"),this.step1=document.querySelector(".login_register-step-1"),this.step1_form=document.querySelector(".login_register-step-1 form.login__form"),this.step2=document.querySelector(".login_register-step-2"),this.step2_form=document.querySelector(".login_register-step-2 form.login__form"),this.mobile_popup=document.querySelector(".popup_mobile"),this.mobile_popup_close=this.mobile_popup.querySelector(".popup__close"),this.wrapper=document.querySelector(".menu__wrapper"),this.header_register_button=document.querySelector(".header__link_register"),this.header_login_button=document.querySelector(".header__link_login"),this.recovery_button=document.querySelector(".login__password-recovery"),this.lightbox=document.querySelector("body>.lightbox"),this.login_popup=document.querySelector(".login_login"),this.recovery=document.querySelector(".login_recovery"),this.password=document.querySelector(".login_password"),this.recovery_form=this.recovery.querySelector(".login__form"),this.password_form=this.password.querySelector(".login__form"),this.error_message=document.querySelector(".alert_form-send-fail"),this.email=document.querySelector(".login_email"),this.success=document.querySelector(".login_success"),this.current=document.querySelector(".login_open"),this.last=[],this.login_button.addEventListener("click",this.openLoginForm.bind(this)),this.recovery_button.addEventListener("click",this.openRecovery.bind(this)),this.lightbox.addEventListener("click",this.closeAll.bind(this)),this.register_button.addEventListener("click",this.openRegister.bind(this)),this.header_login_button.addEventListener("click",this.openLoginOuter.bind(this)),this.header_register_button.addEventListener("click",this.openRegisterOuter.bind(this)),this.mobile_popup_close.addEventListener("click",this.closeMobilePopup.bind(this)),this.recovery_form.addEventListener("submit",this.sendData.bind(this)),this.password_form.addEventListener("submit",this.sendData.bind(this)),this.step1_form.addEventListener("submit",this.openNext.bind(this)),this.step2_form.addEventListener("submit",this.sendData.bind(this)),window.addEventListener("resize",this.reposPopup.bind(this)),$(".login select").select2(),[].forEach.call(document.querySelectorAll(".login"),function(e){e.style.visibility="visible"}),[].forEach.call(i,function(t){t.addEventListener("click",e.openMobilePopup.bind(e))}),[].forEach.call(t,function(t){t.addEventListener("click",e.goback.bind(e))}),[].forEach.call(o,function(t){t.addEventListener("click",e.openLoginInner.bind(e))}),this.WebRTCSupport=!document.documentElement.classList.contains("no-peerconnection"),this.WebRTCSupport||([].forEach.call(document.querySelectorAll("form.login__form input, form.login__form button, form.login__form select"),function(e){e.setAttribute("disabled","disabled")}),[].forEach.call(document.documentElement.querySelectorAll("form.login__form"),function(e){e.addEventListener("click",function(t){e.closest(".login").querySelector(".popup_browser").open()})}),[].forEach.call(document.querySelectorAll(".popup_browser"),function(t){e.showPopup(t)}))}}},{key:"openNext",value:function(e){e.preventDefault(),0!=this.step1_form.validate()&&this.openForm(this.step2)}},{key:"reposPopup",value:function(e){this.menu_popup_open&&(this.mobile_popup.style[Modernizr.prefixed("transform")]="translateY("+this.mobile_popup.offsetHeight+"px)")}},{key:"closeMobilePopup",value:function(){var e=this;this.menu_popup_open&&(this.menu_popup_open=!1,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:0},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:1},{duration:250,begin:function(){e.mobile_popup_button.style.display="block"}}))}},{key:"openMobilePopup",value:function(){var e=this;this.menu_popup_open||(this.menu_popup_open=!0,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:this.mobile_popup.offsetHeight+"px"},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:0},{duration:250,complete:function(){e.mobile_popup_button.style.display="none"}}))}},{key:"showPopup",value:function(e){void 0!=e.show?e.show():setTimeout(this.showPopup.bind(this,e),50)}},{key:"openLoginOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.login_button.click()},800)}},{key:"openRegisterOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.register_button.click()},800)}},{key:"sendData",value:function(e){var t=this;e.preventDefault();var o=e.currentTarget;if(0!=o.validate())try{!function(){var e=4,i=200,n=void 0,r=new XMLHttpRequest,s=new Promise(function(n,s){r.open("POST",o.getAttribute("action")),r.send(new FormData(o)),r.onreadystatechange=function(){r.readyState===e&&(t.recovery_form.reset(),r.status===i?n():s({code:parseInt(r.status,10),message:r.statusText}))}});n=o.hasAttribute("data-check")?t.showCheckMessage.bind(t):t.showSuccessMessage.bind(t),s.then(n)["catch"](t.showErrorMessage.bind(t))}()}catch(i){console.log("error: ",i)}}},{key:"showCheckMessage",value:function(){this.openForm(this.email)}},{key:"showSuccessMessage",value:function(){this.last=new Array,this.openForm(this.success)}},{key:"openLoginInner",value:function(){this.openForm(this.login_popup)}},{key:"showErrorMessage",value:function(e){this.last=new Array,console.log(e.code,"Responce status code: "+e.code+". "+e.message+"."),this.error_message.open()}},{key:"goback",value:function(){this.openForm()}},{key:"emailHaveSend",value:function(){this.last=new Array,this.openForm(this.email)}},{key:"openRegisterInner",value:function(){this.openForm(this.step1)}},{key:"openRegister",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var t={right:0},o={duration:250};Velocity(this.step1,t,o),this.current=this.step1,t={opacity:1},o={begin:function(){e.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,t,o)}},{key:"openRecovery",value:function(e){e.preventDefault(),this.WebRTCSupport&&this.openForm(this.recovery)}},{key:"openForm",value:function(e,t){$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o=this.current.querySelector("form");if(null!=o&&"undefined"!=typeof o.clear&&setTimeout(function(){null!=o&&o.clear()},500),"undefined"==typeof e&&this.last.length>0)e=this.last.pop();else{if("undefined"==typeof e&&0==this.last.length)return void this.closeAll();1!=t&&this.last.push(this.current)}o=e.querySelector("form"),null!=o&&setTimeout(function(){null!=o&&o.clear()},500);var i={right:-this.current.offsetWidth+"px"},n={duration:250};Velocity(this.current,i,n),i={right:0},n={duration:250},Velocity(e,i,n),this.current=e}},{key:"closeAll",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!0),$.fn.fullpage.setKeyboardScrolling(!0);var t={right:-this.current.offsetWidth+"px"},o={duration:250};Velocity(this.current,t,o),this.current=null,t={opacity:0},o={complete:function(){e.lightbox.style.display="none"},duration:250},Velocity(this.lightbox,t,o),setTimeout(function(){e.clearAll()},500)}},{key:"clearAll",value:function(){[].forEach.call(document.querySelectorAll("form"),function(e){e.clear()}),$(".login select").select2("destroy"),$(".login select").select2()}},{key:"openLoginForm",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o={right:0},i={duration:250};Velocity(this.login_popup,o,i),this.current=this.login_popup,o={opacity:1},i={begin:function(){t.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,o,i)}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}();!function(){var t=function(){function t(e){_classCallCheck(this,t),this.popup=e,e.querySelector(".popup__close").addEventListener("click",this.close.bind(this)),this.popup.close=this.close.bind(this),this.popup.open=this.open.bind(this),this.popup.show=this.show.bind(this),this.status=!1,this.jamping=!1}return _createClass(t,[{key:"show",value:function(){this.popup.style.display="block",this.popup.style[Modernizr.prefixed("transform")]="rotateX(0)",this.status=!0}},{key:"hide",value:function(){this.popup.style.display="none",this.popup.style[Modernizr.prefixed("transform")]="rotateX(180deg)",this.status=!1,Velocity(this.popup,"stop")}},{key:"close",value:function(){var t=this;this.jamping||this.status&&(Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"120deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;if(!this.jamping){if(this.status)return void this.jump();this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"0deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!0}}),Velocity(this.popup,{rotateX:"20deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"10deg"},200),Velocity(this.popup,{rotateX:"0deg"},{duration:175,complete:function(){t.jamping=!1}})}}},{key:"jump",value:function(){var t=this;this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"35deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"20deg"},200),Velocity(this.popup,{rotateX:"0deg"},175),Velocity(this.popup,{rotateX:"15deg"},250),Velocity(this.popup,{rotateX:"0deg"},{duration:225,complete:function(){t.jamping=!1}})}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".popup_browser"),function(e){new t(e)}),[].forEach.call(document.querySelectorAll(".popup_common"),function(e){new t(e),e.classList.contains("popup_open")&&e.open()})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}();!function(){var e=function(){function e(t){_classCallCheck(this,e),this.form=t,t.setAttribute("novalidate","novalidate"),t.addEventListener("submit",this.validate.bind(this)),t.validate=this.validate.bind(this),t.clear=this.clear.bind(this),this.messages={en:{required:"Required field",email:"Wrong email format",equal:"Password fields should be equal",url:"Wrong url format"},ru:{required:"Поле обязательно для заполнения",email:"Проверьте формат email",equal:"Пароли должны совпадать",url:"Проверьте формат URL"}}}return _createClass(e,[{key:"clear",value:function(){this.form.reset();var e=$(this.form).find("select");e.length>0&&(e.select2("destroy"),e.select2()),setTimeout(function(){var e=document.querySelectorAll(".form-error"),t=document.querySelectorAll("[data-valid], [data-invalid]");[].forEach.call(e,function(e){e.parentNode.removeChild(e)}),[].forEach.call(t,function(e){e.removeAttribute("data-invalid"),e.removeAttribute("data-valid")})},100)}},{key:"addError",value:function(e,t,r){if(null==e.parentNode.querySelector('.form-error[data-type="'+r+'"]')){var a=document.createElement("P");a.appendChild(document.createTextNode(t)),a.classList.add("form-error"),a.setAttribute("data-type",r),e.parentNode.appendChild(a)}}},{key:"clearError",value:function(e,t){var r=e.parentNode.querySelector('.form-error[data-type="'+t+'"]');null!=r&&e.parentNode.removeChild(r)}},{key:"validate",value:function(e){var t=this;"undefined"==typeof e||e.currentTarget.hasAttribute("data-reload")||e.preventDefault();var r=!0,a=this.form.querySelectorAll("[data-equal]"),l=this.form.querySelectorAll("[required]"),o=this.form.querySelectorAll('input[type="url"]'),i=this.form.querySelectorAll('input[type="email"]'),n=new RegExp("^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$","i"),u=new RegExp("^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$");[].forEach.call(a,function(e){var a=t.form.querySelector(e.getAttribute("data-equal"));e.value.trim()!=a.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].equal,"equal")):t.clearError(e,"equal")}),[].forEach.call(l,function(e){""===e.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].required,"required")):t.clearError(e,"required")}),[].forEach.call(o,function(e){e.value.trim().length>0&&n.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].url,"url")):t.clearError(e,"url")}),[].forEach.call(i,function(e){e.value.trim().length>0&&u.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].email,"email")):t.clearError(e,"email")});var d=Array.prototype.slice.call(a).concat(Array.prototype.slice.call(l),Array.prototype.slice.call(o),Array.prototype.slice.call(i));[].forEach.call(d,function(e){var t=e.parentNode.querySelector(".form-error");if(null!=t){var r=document.createAttribute("data-invalid");r.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(r),e.nextSibling.removeAttribute("data-valid")):(e.setAttributeNode(r),e.removeAttribute("data-valid"))}else{var a=document.createAttribute("data-valid");a.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(a),e.nextSibling.removeAttribute("data-invalid")):(e.setAttributeNode(a),e.removeAttribute("data-invalid"))}});var c=this.form.querySelectorAll(".form_error").length;return c>0&&(r=!1),r===!1&&"undefined"!=typeof e&&e.preventDefault(),r}}]),e}(),t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(function(){var t=document.querySelectorAll("form");[].forEach.call(t,function(t){new e(t)})})}();
//# sourceMappingURL=data:application/json;base64,