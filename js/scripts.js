"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,i,n){return i&&e(t.prototype,i),n&&e(t,n),t}}();console.log("landing"),function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this;this.fired=!1;var t=document.querySelector(".header"),i=document.querySelector(".clock");$(".landing").fullpage({sectionSelector:".landing__section",navigation:!0,afterLoad:this.hideLoader.bind(this),afterRender:this.recountSlides.bind(this),afterResize:this.recountSlides.bind(this),onLeave:function(n,o,a){1==o?(t.classList.toggle("header_open",!1),e.hideNav()):(t.classList.toggle("header_open",!0),e.showNav()),6==o?i.classList.toggle("clock_visible",!0):i.classList.toggle("clock_visible",!1)}}),document.querySelector(".footer__top").addEventListener("click",this.scrollToTop.bind(this))}},{key:"hideNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:0},{duration:300,complete:function(){e.nav.style.display="none"}})}},{key:"showNav",value:function(){var e=this;Velocity(this.nav,"finish"),Velocity(this.nav,{opacity:1},{duration:300,begin:function(){e.nav.style.display="block"}})}},{key:"hideLoader",value:function(){if(!this.fired){this.fired=!0,this.nav=document.getElementById("fp-nav"),this.hideNav();var e=document.querySelector(".loader__wrapper"),t={opacity:0},i={duration:500,complete:function(){e.parentNode.removeChild(e)}};Velocity(e,t,i)}}},{key:"recountSlides",value:function(){var e=document.querySelector(".clock"),t=document.querySelector(".fp-slidesContainer"),i=t.querySelector(".slide__title"),n=t.querySelector(".slide__text"),o=Math.min(t.offsetHeight-i.offsetHeight-n.offsetHeight+90,702),a=o/702;t.offsetWidth<=750?(e.style[Modernizr.prefixed("transform")]="scale("+a+")",e.style.margin="0 0 0 -"+e.offsetWidth*a*.33+"px"):e.removeAttribute("style")}},{key:"scrollToTop",value:function(e){e.preventDefault(),$.fn.fullpage.moveTo(1,0)}}]),e}();new e}();
"use strict";function _classCallCheck(i,e){if(!(i instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function i(i,e){for(var o=0;o<e.length;o++){var n=e[o];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(i,n.key,n)}}return function(e,o,n){return o&&i(e.prototype,o),n&&i(e,n),e}}();console.log("layout"),function(){window.mobileAndTabletcheck=function(){var i=!1;return function(e){(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0,4)))&&(i=!0)}(navigator.userAgent||navigator.vendor||window.opera),i},window.isMobile={Android:function(){return/Android/i.test(navigator.userAgent)},BlackBerry:function(){return/BlackBerry/i.test(navigator.userAgent)},iOS:function(){return/iPhone|iPad|iPod/i.test(navigator.userAgent)},Windows:function(){return/IEMobile/i.test(navigator.userAgent)},any:function(){return isMobile.Android()||isMobile.BlackBerry()||isMobile.iOS()||isMobile.Windows()}};var i=function(){function i(){_classCallCheck(this,i);var e=new Promise(function(i,e){return"loading"!=document.readyState?i():void document.addEventListener("DOMContentLoaded",function(){return i()})});e.then(this.init.bind(this))}return _createClass(i,[{key:"init",value:function(){window.isMobile.Android()?document.body.parentNode.classList.add("android"):window.isMobile.iOS()?document.body.parentNode.classList.add("ios"):window.mobileAndTabletcheck()?document.body.parentNode.classList.add("unknown-mobile"):document.body.parentNode.classList.add("desktop")}}]),i}();new i}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var o=0;o<t.length;o++){var i=t[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,o,i){return o&&e(t.prototype,o),i&&e(t,i),t}}();console.log("Menu"),function(){var e=function(){function e(){_classCallCheck(this,e);var t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(this.init.bind(this))}return _createClass(e,[{key:"init",value:function(){var e=this,t=document.querySelectorAll(".login__back"),o=document.querySelectorAll(".login__login-button, .login_success .login__submit"),i=document.querySelectorAll(".menu__interpreter, .header__interpreter");this.menu_popup_open=!1,this.login_button=document.querySelector(".menu__login"),this.register_button=document.querySelector(".menu__register"),this.step1=document.querySelector(".login_register-step-1"),this.step1_form=document.querySelector(".login_register-step-1 form.login__form"),this.step2=document.querySelector(".login_register-step-2"),this.step2_form=document.querySelector(".login_register-step-2 form.login__form"),this.mobile_popup=document.querySelector(".popup_mobile"),this.mobile_popup_close=this.mobile_popup.querySelector(".popup__close"),this.wrapper=document.querySelector(".menu__wrapper"),this.header_register_button=document.querySelector(".header__link_register"),this.header_login_button=document.querySelector(".header__link_login"),this.recovery_button=document.querySelector(".login__password-recovery"),this.lightbox=document.querySelector("body>.lightbox"),this.login_popup=document.querySelector(".login_login"),this.recovery=document.querySelector(".login_recovery"),this.password=document.querySelector(".login_password"),this.recovery_form=this.recovery.querySelector(".login__form"),this.password_form=this.password.querySelector(".login__form"),this.error_message=document.querySelector(".login_error"),this.email=document.querySelector(".login_email"),this.success=document.querySelector(".login_success"),this.current=document.querySelector(".login_open"),this.last=[],this.login_button.addEventListener("click",this.openLoginForm.bind(this)),this.recovery_button.addEventListener("click",this.openRecovery.bind(this)),this.lightbox.addEventListener("click",this.closeAll.bind(this)),this.register_button.addEventListener("click",this.openRegister.bind(this)),this.header_login_button.addEventListener("click",this.openLoginOuter.bind(this)),this.header_register_button.addEventListener("click",this.openLoginOuter.bind(this)),this.mobile_popup_close.addEventListener("click",this.closeMobilePopup.bind(this)),this.recovery_form.addEventListener("submit",this.sendData.bind(this)),this.password_form.addEventListener("submit",this.sendData.bind(this)),this.step1_form.addEventListener("submit",this.openNext.bind(this)),this.step2_form.addEventListener("submit",this.sendData.bind(this)),window.addEventListener("resize",this.reposPopup.bind(this)),$(".login select").select2(),[].forEach.call(i,function(t){t.addEventListener("click",e.openMobilePopup.bind(e))}),[].forEach.call(t,function(t){t.addEventListener("click",e.goback.bind(e))}),[].forEach.call(o,function(t){t.addEventListener("click",e.openLoginInner.bind(e))}),this.WebRTCSupport=!document.documentElement.classList.contains("no-peerconnection"),this.WebRTCSupport||([].forEach.call(document.querySelectorAll("form.login__form input, form.login__form button, form.login__form select"),function(e){e.setAttribute("disabled","disabled")}),[].forEach.call(document.documentElement.querySelectorAll("form.login__form"),function(e){e.addEventListener("click",function(t){e.closest(".login").querySelector(".popup_browser").open()})}),[].forEach.call(document.querySelectorAll(".popup_browser"),function(t){e.showPopup(t)}))}},{key:"openNext",value:function(e){e.preventDefault(),0!=this.step1_form.validate()&&this.openForm(this.step2)}},{key:"reposPopup",value:function(e){this.menu_popup_open&&(this.mobile_popup.style[Modernizr.prefixed("transform")]="translateY("+this.mobile_popup.offsetHeight+"px)")}},{key:"closeMobilePopup",value:function(){var e=this;this.menu_popup_open&&(this.menu_popup_open=!1,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:0},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:1},{duration:250,begin:function(){e.mobile_popup_button.style.display="block"}}))}},{key:"openMobilePopup",value:function(){var e=this;this.menu_popup_open||(this.menu_popup_open=!0,Velocity(this.mobile_popup,"stop"),Velocity(this.mobile_popup,{translateY:this.mobile_popup.offsetHeight+"px"},250),Velocity(this.mobile_popup_button,"stop"),Velocity(this.mobile_popup_button,{opacity:0},{duration:250,complete:function(){e.mobile_popup_button.style.display="none"}}))}},{key:"showPopup",value:function(e){void 0!=e.show?e.show():setTimeout(this.showPopup.bind(this,e),50)}},{key:"openLoginOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.login_button.click()},800)}},{key:"openRegisterOuter",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.moveTo(1,0),setTimeout(function(){t.register_button.click()},800)}},{key:"sendData",value:function(e){var t=this;e.preventDefault();var o=e.currentTarget;if(0!=o.validate())try{!function(){var e=4,i=200,n=void 0,r=new XMLHttpRequest,s=new Promise(function(n,s){r.open("POST",o.getAttribute("action")),r.send(new FormData(o)),r.onreadystatechange=function(){r.readyState===e&&(t.recovery_form.reset(),r.status===i?n():s({code:parseInt(r.status,10),message:r.statusText}))}});n=o.hasAttribute("data-check")?t.showCheckMessage.bind(t):t.showSuccessMessage.bind(t),s.then(n)["catch"](t.showErrorMessage.bind(t))}()}catch(i){console.log("error: ",i)}}},{key:"showCheckMessage",value:function(){this.openForm(this.email)}},{key:"showSuccessMessage",value:function(){this.openForm(this.success)}},{key:"openLoginInner",value:function(){this.openForm(this.login_popup)}},{key:"showErrorMessage",value:function(e){this.last=new Array,console.log(e.code,"Responce status code: "+e.code+". "+e.message+"."),this.openForm(this.error_message,!0)}},{key:"goback",value:function(){this.openForm()}},{key:"emailHaveSend",value:function(){this.openForm(this.email)}},{key:"openRegisterInner",value:function(){this.openForm(this.step1)}},{key:"openRegister",value:function(){var e=this;event.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var t={right:0},o={duration:250};Velocity(this.step1,t,o),this.current=this.step1,t={opacity:1},o={begin:function(){e.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,t,o)}},{key:"openRecovery",value:function(e){e.preventDefault(),this.WebRTCSupport&&this.openForm(this.recovery)}},{key:"openForm",value:function(e,t){$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o=this.current.querySelector("form");if(null!=o&&setTimeout(function(){o.clear()},250),"undefined"==typeof e&&this.last.length>0)e=this.last.pop();else{if("undefined"==typeof e&&0==this.last.length)return void this.closeAll();1!=t&&this.last.push(this.current)}o=e.querySelector("form"),null!=o&&(console.log("clearing"),setTimeout(function(){o.clear()},250));var i={right:-this.current.offsetWidth+"px"},n={duration:250};Velocity(this.current,i,n),i={right:0},n={duration:250},Velocity(e,i,n),this.current=e}},{key:"closeAll",value:function(){var e=this;$.fn.fullpage.setAllowScrolling(!0),$.fn.fullpage.setKeyboardScrolling(!0);var t={right:-this.current.offsetWidth+"px"},o={duration:250};Velocity(this.current,t,o),this.current=null,t={opacity:0},o={complete:function(){e.lightbox.style.display="none"},duration:250},Velocity(this.lightbox,t,o),this.clearAll()}},{key:"clearAll",value:function(){[].forEach.call(document.querySelectorAll("form"),function(e){e.clear()}),$(".login select").select2("destroy"),$(".login select").select2()}},{key:"openLoginForm",value:function(e){var t=this;e.preventDefault(),$.fn.fullpage.setAllowScrolling(!1),$.fn.fullpage.setKeyboardScrolling(!1);var o={right:0},i={duration:250};Velocity(this.login_popup,o,i),this.current=this.login_popup,o={opacity:1},i={begin:function(){t.lightbox.style.display="block"},duration:250},Velocity(this.lightbox,o,i)}}]),e}();new e}();
"use strict";function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function t(t,e){for(var o=0;o<e.length;o++){var i=e[o];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,o,i){return o&&t(e.prototype,o),i&&t(e,i),e}}();console.log("popup"),function(){var t=function(){function t(e){_classCallCheck(this,t),this.popup=e,e.querySelector(".popup__close").addEventListener("click",this.close.bind(this)),this.popup.close=this.close.bind(this),this.popup.open=this.open.bind(this),this.popup.show=this.show.bind(this),this.status=!1,this.jamping=!1}return _createClass(t,[{key:"show",value:function(){this.popup.style.display="block",this.popup.style[Modernizr.prefixed("transform")]="rotateX(0)",this.status=!0}},{key:"hide",value:function(){this.popup.style.display="none",this.popup.style[Modernizr.prefixed("transform")]="rotateX(180deg)",this.status=!1,Velocity(this.popup,"stop")}},{key:"close",value:function(){var t=this;this.jamping||this.status&&(Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"120deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!1}}))}},{key:"open",value:function(){var t=this;if(!this.jamping){if(this.status)return void this.jump();this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"0deg"},{duration:500,begin:function(){t.popup.style.display="block"},complete:function(){t.status=!0}}),Velocity(this.popup,{rotateX:"20deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"10deg"},200),Velocity(this.popup,{rotateX:"0deg"},{duration:175,complete:function(){t.jamping=!1}})}}},{key:"jump",value:function(){var t=this;this.jamping=!0,Velocity(this.popup,"finish"),Velocity(this.popup,{rotateX:"35deg"},150),Velocity(this.popup,{rotateX:"0deg"},125),Velocity(this.popup,{rotateX:"20deg"},200),Velocity(this.popup,{rotateX:"0deg"},175),Velocity(this.popup,{rotateX:"15deg"},250),Velocity(this.popup,{rotateX:"0deg"},{duration:225,complete:function(){t.jamping=!1}})}}]),t}(),e=new Promise(function(t,e){return"loading"!=document.readyState?t():void document.addEventListener("DOMContentLoaded",function(){return t()})});e.then(function(){[].forEach.call(document.querySelectorAll(".popup_browser"),function(e){new t(e)})})}();
"use strict";function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}();!function(){var e=function(){function e(t){_classCallCheck(this,e),this.form=t,t.setAttribute("novalidate","novalidate"),t.addEventListener("submit",this.validate.bind(this)),t.validate=this.validate.bind(this),t.clear=this.clear.bind(this),this.messages={en:{required:"Required field",email:"Wrong email format",equal:"Password fields should be equal",url:"Wrong url format"},ru:{required:"Поле обязательно для заполнения",email:"Проверьте формат email",equal:"Пароли должны совпадать",url:"Проверьте формат URL"}}}return _createClass(e,[{key:"clear",value:function(){this.form.reset();var e=$(this.form).find("select");e.length>0&&(e.select2("destroy"),e.select2()),setTimeout(function(){var e=document.querySelectorAll(".form-error"),t=document.querySelectorAll("[data-valid], [data-invalid]");[].forEach.call(e,function(e){e.parentNode.removeChild(e)}),[].forEach.call(t,function(e){e.removeAttribute("data-invalid"),e.removeAttribute("data-valid")})},100)}},{key:"addError",value:function(e,t,r){if(null==e.parentNode.querySelector('.form-error[data-type="'+r+'"]')){var a=document.createElement("P");a.appendChild(document.createTextNode(t)),a.classList.add("form-error"),a.setAttribute("data-type",r),e.parentNode.appendChild(a)}}},{key:"clearError",value:function(e,t){var r=e.parentNode.querySelector('.form-error[data-type="'+t+'"]');null!=r&&e.parentNode.removeChild(r)}},{key:"validate",value:function(e){var t=this;"undefined"==typeof e||e.currentTarget.hasAttribute("data-reload")||e.preventDefault();var r=!0,a=this.form.querySelectorAll("[data-equal]"),l=this.form.querySelectorAll("[required]"),o=this.form.querySelectorAll('input[type="url"]'),i=this.form.querySelectorAll('input[type="email"]'),n=new RegExp("^(http|https|ftp)://([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&amp;%$-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0).(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9-]+.)*[a-zA-Z0-9-]+.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(/($|[a-zA-Z0-9.,?'\\+&amp;%$#=~_-]+))*$","i"),u=new RegExp("^([a-zA-Z0-9_.-])+@(([a-zA-Z0-9-])+.)+([a-zA-Z0-9]{2,4})+$");[].forEach.call(a,function(e){var a=t.form.querySelector(e.getAttribute("data-equal"));e.value.trim()!=a.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].equal,"equal")):t.clearError(e,"equal")}),[].forEach.call(l,function(e){""===e.value.trim()?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].required,"required")):t.clearError(e,"required")}),[].forEach.call(o,function(e){e.value.trim().length>0&&n.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].url,"url")):t.clearError(e,"url")}),[].forEach.call(i,function(e){e.value.trim().length>0&&u.test(e.value.trim())===!1?(r=!1,t.addError(e,t.messages[document.body.parentNode.getAttribute("lang")].email,"email")):t.clearError(e,"email")});var d=Array.prototype.slice.call(a).concat(Array.prototype.slice.call(l),Array.prototype.slice.call(o),Array.prototype.slice.call(i));[].forEach.call(d,function(e){var t=e.parentNode.querySelector(".form-error");if(null!=t){var r=document.createAttribute("data-invalid");r.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(r),e.nextSibling.removeAttribute("data-valid")):(e.setAttributeNode(r),e.removeAttribute("data-valid"))}else{var a=document.createAttribute("data-valid");a.value=!0,"SELECT"==e.tagName?(e.nextSibling.setAttributeNode(a),e.nextSibling.removeAttribute("data-invalid")):(e.setAttributeNode(a),e.removeAttribute("data-invalid"))}});var c=this.form.querySelectorAll(".form_error").length;return c>0&&(r=!1),r===!1&&"undefined"!=typeof e&&e.preventDefault(),r}}]),e}(),t=new Promise(function(e,t){return"loading"!=document.readyState?e():void document.addEventListener("DOMContentLoaded",function(){return e()})});t.then(function(){var t=document.querySelectorAll("form");[].forEach.call(t,function(t){new e(t)})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhbmRpbmcvbGFuZGluZy5qcyIsImxheW91dC9sYXlvdXQuanMiLCJsb2dpbi9sb2dpbi5qcyIsInBvcHVwL3BvcHVwLmpzIiwidmFsaWRhdG9yL3ZhbGlkYXRpb24uanMiXSwibmFtZXMiOlsiX2NsYXNzQ2FsbENoZWNrIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJwcm90b3R5cGUiLCJjb25zb2xlIiwibG9nIiwiTGFuZGdpbmciLCJ0aGlzIiwicmVhZHkiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImRvY3VtZW50IiwicmVhZHlTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJ0aGVuIiwiaW5pdCIsImJpbmQiLCJ2YWx1ZSIsIl90aGlzIiwiZmlyZWQiLCJoZWFkZXIiLCJxdWVyeVNlbGVjdG9yIiwiY2xvY2siLCIkIiwiZnVsbHBhZ2UiLCJzZWN0aW9uU2VsZWN0b3IiLCJuYXZpZ2F0aW9uIiwiYWZ0ZXJMb2FkIiwiaGlkZUxvYWRlciIsImFmdGVyUmVuZGVyIiwicmVjb3VudFNsaWRlcyIsImFmdGVyUmVzaXplIiwib25MZWF2ZSIsImluZGV4IiwibmV4dEluZGV4IiwiZGlyZWN0aW9uIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwiaGlkZU5hdiIsInNob3dOYXYiLCJzY3JvbGxUb1RvcCIsIl90aGlzMiIsIlZlbG9jaXR5IiwibmF2Iiwib3BhY2l0eSIsImR1cmF0aW9uIiwiY29tcGxldGUiLCJzdHlsZSIsImRpc3BsYXkiLCJfdGhpczMiLCJiZWdpbiIsImdldEVsZW1lbnRCeUlkIiwibG9hZGVyIiwib3B0aW9ucyIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsImNsb2NrX3NsaWRlIiwidGl0bGUiLCJ0ZXh0IiwiaGVpZ2h0IiwiTWF0aCIsIm1pbiIsIm9mZnNldEhlaWdodCIsInBlcmMiLCJvZmZzZXRXaWR0aCIsIk1vZGVybml6ciIsInByZWZpeGVkIiwibWFyZ2luIiwicmVtb3ZlQXR0cmlidXRlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCIsImZuIiwibW92ZVRvIiwid2luZG93IiwibW9iaWxlQW5kVGFibGV0Y2hlY2siLCJjaGVjayIsImEiLCJ0ZXN0Iiwic3Vic3RyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidmVuZG9yIiwib3BlcmEiLCJpc01vYmlsZSIsIkFuZHJvaWQiLCJCbGFja0JlcnJ5IiwiaU9TIiwiV2luZG93cyIsImFueSIsIkxheW91dCIsImJvZHkiLCJhZGQiLCJNZW51IiwiYmFja19idXR0b25zIiwicXVlcnlTZWxlY3RvckFsbCIsImxvZ2luX2J1dHRvbnMiLCJtb2JpbGVfcG9wdXBfYnV0dG9ucyIsIm1lbnVfcG9wdXBfb3BlbiIsImxvZ2luX2J1dHRvbiIsInJlZ2lzdGVyX2J1dHRvbiIsInN0ZXAxIiwic3RlcDFfZm9ybSIsInN0ZXAyIiwic3RlcDJfZm9ybSIsIm1vYmlsZV9wb3B1cCIsIm1vYmlsZV9wb3B1cF9jbG9zZSIsIndyYXBwZXIiLCJoZWFkZXJfcmVnaXN0ZXJfYnV0dG9uIiwiaGVhZGVyX2xvZ2luX2J1dHRvbiIsInJlY292ZXJ5X2J1dHRvbiIsImxpZ2h0Ym94IiwibG9naW5fcG9wdXAiLCJyZWNvdmVyeSIsInBhc3N3b3JkIiwicmVjb3ZlcnlfZm9ybSIsInBhc3N3b3JkX2Zvcm0iLCJlcnJvcl9tZXNzYWdlIiwiZW1haWwiLCJzdWNjZXNzIiwiY3VycmVudCIsImxhc3QiLCJvcGVuTG9naW5Gb3JtIiwib3BlblJlY292ZXJ5IiwiY2xvc2VBbGwiLCJvcGVuUmVnaXN0ZXIiLCJvcGVuTG9naW5PdXRlciIsImNsb3NlTW9iaWxlUG9wdXAiLCJzZW5kRGF0YSIsIm9wZW5OZXh0IiwicmVwb3NQb3B1cCIsInNlbGVjdDIiLCJmb3JFYWNoIiwiY2FsbCIsImJ1dHRvbiIsIm9wZW5Nb2JpbGVQb3B1cCIsImdvYmFjayIsIm9wZW5Mb2dpbklubmVyIiwiV2ViUlRDU3VwcG9ydCIsImRvY3VtZW50RWxlbWVudCIsImNvbnRhaW5zIiwiZWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImZvcm0iLCJjbG9zZXN0Iiwib3BlbiIsInBvcHVwIiwic2hvd1BvcHVwIiwidmFsaWRhdGUiLCJvcGVuRm9ybSIsInRyYW5zbGF0ZVkiLCJtb2JpbGVfcG9wdXBfYnV0dG9uIiwidW5kZWZpbmVkIiwic2hvdyIsInNldFRpbWVvdXQiLCJfdGhpczQiLCJjbGljayIsIl90aGlzNSIsIl90aGlzNiIsImN1cnJlbnRUYXJnZXQiLCJET05FIiwiT0siLCJtZXNzYWdlIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJsb2FkZWQiLCJnZXRBdHRyaWJ1dGUiLCJzZW5kIiwiRm9ybURhdGEiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNldCIsInN0YXR1cyIsImNvZGUiLCJwYXJzZUludCIsInN0YXR1c1RleHQiLCJoYXNBdHRyaWJ1dGUiLCJzaG93Q2hlY2tNZXNzYWdlIiwic2hvd1N1Y2Nlc3NNZXNzYWdlIiwic2hvd0Vycm9yTWVzc2FnZSIsImVyciIsInJlYXNvbiIsIkFycmF5IiwiX3RoaXM3Iiwic2V0QWxsb3dTY3JvbGxpbmciLCJzZXRLZXlib2FyZFNjcm9sbGluZyIsInJpZ2h0IiwiZG9udF9zYXZlIiwiY2xlYXIiLCJwb3AiLCJwdXNoIiwiX3RoaXM4IiwiY2xlYXJBbGwiLCJfdGhpczkiLCJQb3B1cCIsImNsb3NlIiwiamFtcGluZyIsInJvdGF0ZVgiLCJqdW1wIiwiVmFsaWRhdGlvbiIsIm1lc3NhZ2VzIiwiZW4iLCJyZXF1aXJlZCIsImVxdWFsIiwidXJsIiwicnUiLCJzZWxlY3RvcnMiLCJmaW5kIiwiZXJyb3JzIiwiZmllbGRzIiwiZXJyb3IiLCJmaWVsZCIsInR5cGUiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsInZhbGlkIiwiZXF1YWxfZmllbGRzIiwicmVxdWlyZWRfZmllbGRzIiwidXJsX2ZpZWxkcyIsImVtYWlsX2ZpZWxkcyIsInVybF9yZWdleCIsIlJlZ0V4cCIsImVtYWlsX3JlZ2V4IiwidHJpbSIsImFkZEVycm9yIiwiY2xlYXJFcnJvciIsImFsbF9maWVsZHMiLCJzbGljZSIsImNvbmNhdCIsImludmFsaWQiLCJjcmVhdGVBdHRyaWJ1dGUiLCJ0YWdOYW1lIiwibmV4dFNpYmxpbmciLCJzZXRBdHRyaWJ1dGVOb2RlIiwiX3ZhbGlkIiwiZXJyb3JzX2NvdW50IiwiZm9ybXMiXSwibWFwcGluZ3MiOiJBQUFBLFlBSUEsU0FBU0EsaUJBQWdCQyxFQUFVQyxHQUFlLEtBQU1ELFlBQW9CQyxJQUFnQixLQUFNLElBQUlDLFdBQVUscUNBRmhILEdBQUlDLGNBQWUsV0FBZSxRQUFTQyxHQUFpQkMsRUFBUUMsR0FBUyxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSUQsRUFBTUUsT0FBUUQsSUFBSyxDQUFFLEdBQUlFLEdBQWFILEVBQU1DLEVBQUlFLEdBQVdDLFdBQWFELEVBQVdDLGFBQWMsRUFBT0QsRUFBV0UsY0FBZSxFQUFVLFNBQVdGLEtBQVlBLEVBQVdHLFVBQVcsR0FBTUMsT0FBT0MsZUFBZVQsRUFBUUksRUFBV00sSUFBS04sSUFBaUIsTUFBTyxVQUFVUixFQUFhZSxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWVosRUFBaUJILEVBQVlpQixVQUFXRixHQUFpQkMsR0FBYWIsRUFBaUJILEVBQWFnQixHQUFxQmhCLEtBRGppQmtCLFNBQVFDLElBQUksV0FDWixXQU1JLEdBTE1DLEdBQVEsV0FLQyxRQUxUQSxLQVlFdEIsZ0JBQWdCdUIsS0FabEJELEVBTUUsSUFBSUUsR0FBUSxHQUFJQyxTQUFRLFNBQUNDLEVBQVNDLEdBQzlCLE1BQTJCLFdBQXZCQyxTQUFTQyxXQUFnQ0gsUUFDN0NFLFVBQVNFLGlCQUFpQixtQkFB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dEMsRUFBUXRGLFdBQVdqQyxjQUFjLGNBQzNDLElBQVcsTUFBUDZKLEVBQWEsQ0FDYixHQUFJa0QsR0FBVXpOLFNBQVMwTixnQkFBZ0IsZUFDdkNELEdBQVFuTixPQUFRLEVBRU8sVUFBbkIySCxFQUFRMEYsU0FDUjFGLEVBQVEyRixZQUFZQyxpQkFBaUJKLEdBQ3JDeEYsRUFBUTJGLFlBQVluSyxnQkFBZ0IsZ0JBRXBDd0UsRUFBUTRGLGlCQUFpQkosR0FDekJ4RixFQUFReEUsZ0JBQWdCLG1CQUV6QixDQUVILEdBQUlxSyxHQUFROU4sU0FBUzBOLGdCQUFnQixhQUNyQ0ksR0FBTXhOLE9BQVEsRUFDUyxVQUFuQjJILEVBQVEwRixTQUNSMUYsRUFBUTJGLFlBQVlDLGlCQUFpQkMsR0FDckM3RixFQUFRMkYsWUFBWW5LLGdCQUFnQixrQkFFcEN3RSxFQUFRNEYsaUJBQWlCQyxHQUN6QjdGLEVBQVF4RSxnQkFBZ0IsbUJBS3BDLElBQUlzSyxHQUFlcE8sS0FBS3dJLEtBQUtoRCxpQkFBaUIsZUFBZXRHLE1BVzdELE9BVklrUCxHQUFlLElBQ2ZwQixHQUFRLEdBR1JBLEtBQVUsR0FDVSxtQkFBVGpKLElBQ1BBLEVBQU1DLGlCQUlQZ0osTUFoTVRqQixLQXNNRjlMLEVBQVEsR0FBSUMsU0FBUSxTQUFDQyxFQUFTQyxHQUM5QixNQUEyQixXQUF2QkMsU0FBU0MsV0FBZ0NILFFBQzdDRSxVQUFTRSxpQkFBaUIsbUJBQW9CLFdBYzFDLE1BZGdESixRQUd4REYsR0FBTU8sS0FBSyxXQUNQLEdBQUk2TixHQUFRaE8sU0FBU21GLGlCQUFpQixXQUNuQ3FDLFFBQVFDLEtBQUt1RyxFQUFPLFNBQUM3RixHQUNwQixHQUFJdUQsR0FBV3ZEIiwiZmlsZSI6InNjcmlwdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbmNvbnNvbGUubG9nKCdsYW5kaW5nJyk7XG4oZnVuY3Rpb24oKSB7XG4gICAgY2xhc3MgTGFuZGdpbmcge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN0YXJ0IGluaXRpYWxpemF0aW9uIG9uIGRvbWxvYWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPSBcImxvYWRpbmdcIikgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWFkeS50aGVuKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKi9cbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGxldCBoZWFkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyJylcbiAgICAgICAgICAgICAgICAsIGNsb2NrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNsb2NrJyk7XG5cbiAgICAgICAgICAgICQoXCIubGFuZGluZ1wiKS5mdWxscGFnZSh7XG4gICAgICAgICAgICAgICAgc2VjdGlvblNlbGVjdG9yOiBcIi5sYW5kaW5nX19zZWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgbmF2aWdhdGlvbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBhZnRlckxvYWQ6IHRoaXMuaGlkZUxvYWRlci5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgIGFmdGVyUmVuZGVyOiB0aGlzLnJlY291bnRTbGlkZXMuYmluZCh0aGlzKSxcbiAgICAgICAgICAgICAgICBhZnRlclJlc2l6ZTogdGhpcy5yZWNvdW50U2xpZGVzLmJpbmQodGhpcyksXG4gICAgICAgICAgICAgICAgb25MZWF2ZTogKGluZGV4LCBuZXh0SW5kZXgsIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4ID09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlci5jbGFzc0xpc3QudG9nZ2xlKCdoZWFkZXJfb3BlbicsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZU5hdigpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyLmNsYXNzTGlzdC50b2dnbGUoJ2hlYWRlcl9vcGVuJywgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dOYXYoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0SW5kZXggPT0gNikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2suY2xhc3NMaXN0LnRvZ2dsZSgnY2xvY2tfdmlzaWJsZScsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xvY2suY2xhc3NMaXN0LnRvZ2dsZSgnY2xvY2tfdmlzaWJsZScsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mb290ZXJfX3RvcFwiKS5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5zY3JvbGxUb1RvcC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGVOYXYgKCkge1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5uYXYsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5uYXYsIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMFxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm5hdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TmF2ICgpIHtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCBcImZpbmlzaFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubmF2LCB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMVxuICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDBcbiAgICAgICAgICAgICAgICAsIGJlZ2luOiAoKT0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uYXYuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGVMb2FkZXIoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5maXJlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5uYXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnAtbmF2Jyk7XG4gICAgICAgICAgICB0aGlzLmhpZGVOYXYoKTtcblxuICAgICAgICAgICAgbGV0IGxvYWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkZXJfX3dyYXBwZXInKSxcbiAgICAgICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxvYWRlcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBWZWxvY2l0eShsb2FkZXIsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgcmVjb3VudFNsaWRlcygpIHtcbiAgICAgICAgICAgIGxldCBjbG9jayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbG9jaycpLFxuICAgICAgICAgICAgICAgIGNsb2NrX3NsaWRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZwLXNsaWRlc0NvbnRhaW5lcicpLFxuICAgICAgICAgICAgICAgIHRpdGxlID0gY2xvY2tfc2xpZGUucXVlcnlTZWxlY3RvcignLnNsaWRlX190aXRsZScpLFxuICAgICAgICAgICAgICAgIHRleHQgPSBjbG9ja19zbGlkZS5xdWVyeVNlbGVjdG9yKCcuc2xpZGVfX3RleHQnKSxcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1pbihjbG9ja19zbGlkZS5vZmZzZXRIZWlnaHQgLSB0aXRsZS5vZmZzZXRIZWlnaHQgLSB0ZXh0Lm9mZnNldEhlaWdodCArIDkwLCA3MDIpLFxuICAgICAgICAgICAgICAgIHBlcmMgPSBoZWlnaHQgLyA3MDI7XG5cbiAgICAgICAgICAgIGlmIChjbG9ja19zbGlkZS5vZmZzZXRXaWR0aCA8PSA3NTApIHtcbiAgICAgICAgICAgICAgICBjbG9jay5zdHlsZVtNb2Rlcm5penIucHJlZml4ZWQoJ3RyYW5zZm9ybScpXSA9ICdzY2FsZSgnICsgcGVyYyArICcpJztcbiAgICAgICAgICAgICAgICBjbG9jay5zdHlsZS5tYXJnaW4gPSBcIjAgMCAwIC1cIiArIChjbG9jay5vZmZzZXRXaWR0aCAqIHBlcmMpICogMC4zMyArIFwicHhcIjtcbiAgICAgICAgICAgICAgICAvLyBjbG9jay5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JlZCc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsb2NrLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsVG9Ub3AoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLm1vdmVUbygxLCAwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXcgTGFuZGdpbmc7XG59KSgpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5jb25zb2xlLmxvZygnbGF5b3V0Jyk7XG4oZnVuY3Rpb24oKSB7XG4gICAgd2luZG93Lm1vYmlsZUFuZFRhYmxldGNoZWNrID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjaGVjayA9IGZhbHNlO1xuICAgICAgICAoZnVuY3Rpb24oYSkge1xuICAgICAgICAgICAgaWYgKC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm98YW5kcm9pZHxpcGFkfHBsYXlib29rfHNpbGsvaS50ZXN0KGEpIHx8IC8xMjA3fDYzMTB8NjU5MHwzZ3NvfDR0aHB8NTBbMS02XWl8Nzcwc3w4MDJzfGEgd2F8YWJhY3xhYyhlcnxvb3xzXFwtKXxhaShrb3xybil8YWwoYXZ8Y2F8Y28pfGFtb2l8YW4oZXh8bnl8eXcpfGFwdHV8YXIoY2h8Z28pfGFzKHRlfHVzKXxhdHR3fGF1KGRpfFxcLW18ciB8cyApfGF2YW58YmUoY2t8bGx8bnEpfGJpKGxifHJkKXxibChhY3xheil8YnIoZXx2KXd8YnVtYnxid1xcLShufHUpfGM1NVxcL3xjYXBpfGNjd2F8Y2RtXFwtfGNlbGx8Y2h0bXxjbGRjfGNtZFxcLXxjbyhtcHxuZCl8Y3Jhd3xkYShpdHxsbHxuZyl8ZGJ0ZXxkY1xcLXN8ZGV2aXxkaWNhfGRtb2J8ZG8oY3xwKW98ZHMoMTJ8XFwtZCl8ZWwoNDl8YWkpfGVtKGwyfHVsKXxlcihpY3xrMCl8ZXNsOHxleihbNC03XTB8b3N8d2F8emUpfGZldGN8Zmx5KFxcLXxfKXxnMSB1fGc1NjB8Z2VuZXxnZlxcLTV8Z1xcLW1vfGdvKFxcLnd8b2QpfGdyKGFkfHVuKXxoYWllfGhjaXR8aGRcXC0obXxwfHQpfGhlaVxcLXxoaShwdHx0YSl8aHAoIGl8aXApfGhzXFwtY3xodChjKFxcLXwgfF98YXxnfHB8c3x0KXx0cCl8aHUoYXd8dGMpfGlcXC0oMjB8Z298bWEpfGkyMzB8aWFjKCB8XFwtfFxcLyl8aWJyb3xpZGVhfGlnMDF8aWtvbXxpbTFrfGlubm98aXBhcXxpcmlzfGphKHR8dilhfGpicm98amVtdXxqaWdzfGtkZGl8a2VqaXxrZ3QoIHxcXC8pfGtsb258a3B0IHxrd2NcXC18a3lvKGN8ayl8bGUobm98eGkpfGxnKCBnfFxcLyhrfGx8dSl8NTB8NTR8XFwtW2Etd10pfGxpYnd8bHlueHxtMVxcLXd8bTNnYXxtNTBcXC98bWEodGV8dWl8eG8pfG1jKDAxfDIxfGNhKXxtXFwtY3J8bWUocmN8cmkpfG1pKG84fG9hfHRzKXxtbWVmfG1vKDAxfDAyfGJpfGRlfGRvfHQoXFwtfCB8b3x2KXx6eil8bXQoNTB8cDF8diApfG13YnB8bXl3YXxuMTBbMC0yXXxuMjBbMi0zXXxuMzAoMHwyKXxuNTAoMHwyfDUpfG43KDAoMHwxKXwxMCl8bmUoKGN8bSlcXC18b258dGZ8d2Z8d2d8d3QpfG5vayg2fGkpfG56cGh8bzJpbXxvcCh0aXx3dil8b3Jhbnxvd2cxfHA4MDB8cGFuKGF8ZHx0KXxwZHhnfHBnKDEzfFxcLShbMS04XXxjKSl8cGhpbHxwaXJlfHBsKGF5fHVjKXxwblxcLTJ8cG8oY2t8cnR8c2UpfHByb3h8cHNpb3xwdFxcLWd8cWFcXC1hfHFjKDA3fDEyfDIxfDMyfDYwfFxcLVsyLTddfGlcXC0pfHF0ZWt8cjM4MHxyNjAwfHJha3N8cmltOXxybyh2ZXx6byl8czU1XFwvfHNhKGdlfG1hfG1tfG1zfG55fHZhKXxzYygwMXxoXFwtfG9vfHBcXC0pfHNka1xcL3xzZShjKFxcLXwwfDEpfDQ3fG1jfG5kfHJpKXxzZ2hcXC18c2hhcnxzaWUoXFwtfG0pfHNrXFwtMHxzbCg0NXxpZCl8c20oYWx8YXJ8YjN8aXR8dDUpfHNvKGZ0fG55KXxzcCgwMXxoXFwtfHZcXC18diApfHN5KDAxfG1iKXx0MigxOHw1MCl8dDYoMDB8MTB8MTgpfHRhKGd0fGxrKXx0Y2xcXC18dGRnXFwtfHRlbChpfG0pfHRpbVxcLXx0XFwtbW98dG8ocGx8c2gpfHRzKDcwfG1cXC18bTN8bTUpfHR4XFwtOXx1cChcXC5ifGcxfHNpKXx1dHN0fHY0MDB8djc1MHx2ZXJpfHZpKHJnfHRlKXx2ayg0MHw1WzAtM118XFwtdil8dm00MHx2b2RhfHZ1bGN8dngoNTJ8NTN8NjB8NjF8NzB8ODB8ODF8ODN8ODV8OTgpfHczYyhcXC18ICl8d2ViY3x3aGl0fHdpKGcgfG5jfG53KXx3bWxifHdvbnV8eDcwMHx5YXNcXC18eW91cnx6ZXRvfHp0ZVxcLS9pLnRlc3QoYS5zdWJzdHIoMCwgNCkpKSBjaGVjayA9IHRydWVcbiAgICAgICAgfSkobmF2aWdhdG9yLnVzZXJBZ2VudCB8fCBuYXZpZ2F0b3IudmVuZG9yIHx8IHdpbmRvdy5vcGVyYSk7XG4gICAgICAgIHJldHVybiBjaGVjaztcbiAgICB9O1xuXG4gICAgd2luZG93LmlzTW9iaWxlID0ge1xuICAgICAgICBBbmRyb2lkOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvQW5kcm9pZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIEJsYWNrQmVycnk6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIC9CbGFja0JlcnJ5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgaU9TOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAvaVBob25lfGlQYWR8aVBvZC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIFdpbmRvd3M6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIC9JRU1vYmlsZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgICAgIH0sXG4gICAgICAgIGFueTogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gKGlzTW9iaWxlLkFuZHJvaWQoKSB8fCBpc01vYmlsZS5CbGFja0JlcnJ5KCkgfHwgaXNNb2JpbGUuaU9TKCkgfHwgaXNNb2JpbGUuV2luZG93cygpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjbGFzcyBMYXlvdXQge1xuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFN0YXJ0IGluaXRpYWxpemF0aW9uIG9uIGRvbWxvYWRcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqL1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPSBcImxvYWRpbmdcIikgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWFkeS50aGVuKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKi9cbiAgICAgICAgaW5pdCgpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuaXNNb2JpbGUuQW5kcm9pZCgpKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2FuZHJvaWQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LmlzTW9iaWxlLmlPUygpKSB7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2lvcycpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cubW9iaWxlQW5kVGFibGV0Y2hlY2soKSkge1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5jbGFzc0xpc3QuYWRkKCd1bmtub3duLW1vYmlsZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUuY2xhc3NMaXN0LmFkZCgnZGVza3RvcCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoJ2FuZHJvaWQnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBuZXcgTGF5b3V0O1xufSkoKTtcbiIsIlwidXNlIHN0cmljdFwiO1xuY29uc29sZS5sb2coJ01lbnUnKTtcbihmdW5jdGlvbiAoKSB7XG4gICAgY2xhc3MgTWVudSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU3RhcnQgaW5pdGlhbGl6YXRpb24gb24gZG9tbG9hZFxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yICgpIHtcbiAgICAgICAgICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT57XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCk9PiByZXNvbHZlKCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWFkeS50aGVuKHRoaXMuaW5pdC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKi9cbiAgICAgICAgaW5pdCAoKSB7XG4gICAgICAgICAgICBsZXQgYmFja19idXR0b25zID0gICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb2dpbl9fYmFjaycpXG4gICAgICAgICAgICAgICAgLCBsb2dpbl9idXR0b25zID0gICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5sb2dpbl9fbG9naW4tYnV0dG9uLCAubG9naW5fc3VjY2VzcyAubG9naW5fX3N1Ym1pdCcpXG4gICAgICAgICAgICAgICAgLCBtb2JpbGVfcG9wdXBfYnV0dG9ucyA9ICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5tZW51X19pbnRlcnByZXRlciwgLmhlYWRlcl9faW50ZXJwcmV0ZXInKTtcblxuICAgICAgICAgICAgdGhpcy5tZW51X3BvcHVwX29wZW4gPSBmYWxzZTtcblxuICAgICAgICAgICAgdGhpcy5sb2dpbl9idXR0b24gPSAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fbG9naW4nKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJfYnV0dG9uID0gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1lbnVfX3JlZ2lzdGVyJyk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RlcDEgPSAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMScpO1xuICAgICAgICAgICAgdGhpcy5zdGVwMV9mb3JtID0gICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fcmVnaXN0ZXItc3RlcC0xIGZvcm0ubG9naW5fX2Zvcm0nKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDIgPSAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlZ2lzdGVyLXN0ZXAtMicpO1xuICAgICAgICAgICAgdGhpcy5zdGVwMl9mb3JtID0gICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fcmVnaXN0ZXItc3RlcC0yIGZvcm0ubG9naW5fX2Zvcm0nKTtcblxuICAgICAgICAgICAgdGhpcy5tb2JpbGVfcG9wdXAgPSAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfbW9iaWxlJyk7XG4gICAgICAgICAgICB0aGlzLm1vYmlsZV9wb3B1cF9jbG9zZSA9ICAgICAgIHRoaXMubW9iaWxlX3BvcHVwLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9fY2xvc2UnKTtcblxuICAgICAgICAgICAgdGhpcy53cmFwcGVyID0gICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubWVudV9fd3JhcHBlcicpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJfcmVnaXN0ZXJfYnV0dG9uID0gICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuaGVhZGVyX19saW5rX3JlZ2lzdGVyJyk7XG4gICAgICAgICAgICB0aGlzLmhlYWRlcl9sb2dpbl9idXR0b24gPSAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2xpbmtfbG9naW4nKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfYnV0dG9uID0gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX19wYXNzd29yZC1yZWNvdmVyeScpO1xuICAgICAgICAgICAgdGhpcy5saWdodGJveCA9ICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Pi5saWdodGJveCcpO1xuICAgICAgICAgICAgdGhpcy5sb2dpbl9wb3B1cCA9ICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fbG9naW4nKTtcbiAgICAgICAgICAgIHRoaXMucmVjb3ZlcnkgPSAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX3JlY292ZXJ5Jyk7XG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkID0gICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9wYXNzd29yZCcpO1xuICAgICAgICAgICAgdGhpcy5yZWNvdmVyeV9mb3JtID0gICAgICAgICAgICB0aGlzLnJlY292ZXJ5LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9fZm9ybScpO1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZF9mb3JtID0gICAgICAgICAgICB0aGlzLnBhc3N3b3JkLnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9fZm9ybScpO1xuICAgICAgICAgICAgdGhpcy5lcnJvcl9tZXNzYWdlID0gICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubG9naW5fZXJyb3InKTtcbiAgICAgICAgICAgIHRoaXMuZW1haWwgPSAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvZ2luX2VtYWlsJyk7XG4gICAgICAgICAgICB0aGlzLnN1Y2Nlc3MgPSAgICAgICAgICAgICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9zdWNjZXNzJyk7XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2dpbl9vcGVuJyk7XG4gICAgICAgICAgICB0aGlzLmxhc3QgPSBbXTtcblxuICAgICAgICAgICAgdGhpcy5sb2dpbl9idXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLm9wZW5Mb2dpbkZvcm0uYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnJlY292ZXJ5X2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlblJlY292ZXJ5LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5saWdodGJveC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VBbGwuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlblJlZ2lzdGVyLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5oZWFkZXJfbG9naW5fYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vcGVuTG9naW5PdXRlci5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyX3JlZ2lzdGVyX2J1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlbkxvZ2luT3V0ZXIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLm1vYmlsZV9wb3B1cF9jbG9zZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xvc2VNb2JpbGVQb3B1cC5iaW5kKHRoaXMpKTtcblxuICAgICAgICAgICAgdGhpcy5yZWNvdmVyeV9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc2VuZERhdGEuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkX2Zvcm0uYWRkRXZlbnRMaXN0ZW5lcignc3VibWl0JywgdGhpcy5zZW5kRGF0YS5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcDFfZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLm9wZW5OZXh0LmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5zdGVwMl9mb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMuc2VuZERhdGEuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnJlcG9zUG9wdXAuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgICAgICQoJy5sb2dpbiBzZWxlY3QnKS5zZWxlY3QyKCk7XG5cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChtb2JpbGVfcG9wdXBfYnV0dG9ucywgKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3Blbk1vYmlsZVBvcHVwLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChiYWNrX2J1dHRvbnMsIChidXR0b24pID0+IHtcbiAgICAgICAgICAgICAgICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmdvYmFjay5iaW5kKHRoaXMpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwobG9naW5fYnV0dG9ucywgKGJ1dHRvbikgPT4ge1xuICAgICAgICAgICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMub3BlbkxvZ2luSW5uZXIuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5XZWJSVENTdXBwb3J0ID0gIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ25vLXBlZXJjb25uZWN0aW9uJyk7XG5cblxuICAgICAgICAgICAgaWYoIXRoaXMuV2ViUlRDU3VwcG9ydCkge1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2Zvcm0ubG9naW5fX2Zvcm0gaW5wdXQsIGZvcm0ubG9naW5fX2Zvcm0gYnV0dG9uLCBmb3JtLmxvZ2luX19mb3JtIHNlbGVjdCcpLCAoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRpc2FibGVkXCIsXCJkaXNhYmxlZFwiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZm9ybS5sb2dpbl9fZm9ybScpLCAoZm9ybSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoZXZlbnQpPT57XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JtLmNsb3Nlc3QoJy5sb2dpbicpLnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9icm93c2VyJykub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucG9wdXBfYnJvd3NlcicpLCAocG9wdXApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93UG9wdXAocG9wdXApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb3Blbk5leHQgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RlcDFfZm9ybS52YWxpZGF0ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnN0ZXAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcG9zUG9wdXAgKGV2ZW50KSB7XG4gICAgICAgICAgICBpZighdGhpcy5tZW51X3BvcHVwX29wZW4pe1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyldID0gXCJ0cmFuc2xhdGVZKFwiICsgdGhpcy5tb2JpbGVfcG9wdXAub2Zmc2V0SGVpZ2h0ICsgXCJweClcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsb3NlTW9iaWxlUG9wdXAgKCkge1xuICAgICAgICAgICAgaWYoIXRoaXMubWVudV9wb3B1cF9vcGVuKXtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1lbnVfcG9wdXBfb3BlbiA9IGZhbHNlO1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cCwgXCJzdG9wXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXAsIHt0cmFuc2xhdGVZOiAwfSwgMjUwKTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXBfYnV0dG9uLCBcInN0b3BcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24sIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDI1MFxuICAgICAgICAgICAgICAgICwgYmVnaW46ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wZW5Nb2JpbGVQb3B1cCAoKSB7XG4gICAgICAgICAgICBpZih0aGlzLm1lbnVfcG9wdXBfb3Blbil7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tZW51X3BvcHVwX29wZW4gPSB0cnVlO1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cCwgXCJzdG9wXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5tb2JpbGVfcG9wdXAsIHt0cmFuc2xhdGVZOiB0aGlzLm1vYmlsZV9wb3B1cC5vZmZzZXRIZWlnaHQgKyBcInB4XCJ9LCAyNTApO1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLm1vYmlsZV9wb3B1cF9idXR0b24sIFwic3RvcFwiKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbiwge1xuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDBcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9iaWxlX3BvcHVwX2J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93UG9wdXAgKHBvcHVwKSB7XG4gICAgICAgICAgICBpZiAocG9wdXAuc2hvdyAhPSB1bmRlZmluZWQpe1xuICAgICAgICAgICAgICAgIHBvcHVwLnNob3coKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLnNob3dQb3B1cC5iaW5kKHRoaXMsIHBvcHVwKSwgNTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTY3JvbGwgdG8gZmlyc3Qgc2xpZGUgYW5kIG9wZW4gbG9naW4gZm9ybVxuICAgICAgICAgKi9cbiAgICAgICAgb3BlbkxvZ2luT3V0ZXIgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5tb3ZlVG8oMSwgMCk7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dpbl9idXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgIH0sIDgwMClcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2Nyb2xsIHRvIGZpcnN0IHNsaWRlIGFuZCBvcGVuIHJlZ2lzdGVyIGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIG9wZW5SZWdpc3Rlck91dGVyIChldmVudCkge1xuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2UubW92ZVRvKDEsIDApO1xuICAgICAgICAgICAgc2V0VGltZW91dCgoKT0+e1xuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJfYnV0dG9uLmNsaWNrKCk7XG4gICAgICAgICAgICB9LCA4MDApXG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNlbmQgcmVnaXN0cmF0aW9uIGRhdGEgYW5kIHNob3cgbWVzc2FnZVxuICAgICAgICAgKi9cbiAgICAgICAgc2VuZERhdGEgKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbGV0IGZvcm0gPSBldmVudC5jdXJyZW50VGFyZ2V0O1xuXG4gICAgICAgICAgICBpZiAoZm9ybS52YWxpZGF0ZSgpID09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGxldCBET05FID0gNFxuICAgICAgICAgICAgICAgICwgT0sgPSAyMDBcbiAgICAgICAgICAgICAgICAsIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICAsIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpXG4gICAgICAgICAgICAgICAgLCBsb2FkZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHhoci5vcGVuKCdQT1NUJywgZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpKTtcbiAgICAgICAgICAgICAgICAgICAgeGhyLnNlbmQobmV3IEZvcm1EYXRhKGZvcm0pKTtcbiAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gRE9ORSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVjb3ZlcnlfZm9ybS5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSBPSykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IHBhcnNlSW50KHhoci5zdGF0dXMsIDEwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IHhoci5zdGF0dXNUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChmb3JtLmhhc0F0dHJpYnV0ZSgnZGF0YS1jaGVjaycpKSB7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLnNob3dDaGVja01lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5zaG93U3VjY2Vzc01lc3NhZ2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsb2FkZWQudGhlbihtZXNzYWdlKS5jYXRjaCh0aGlzLnNob3dFcnJvck1lc3NhZ2UuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgLy8gbG9hZGVkLnRoZW4obWVzc2FnZSkuY2F0Y2gobWVzc2FnZSk7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnJvcjogJywgZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBjaGVjayBlbWFpbCBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICBzaG93Q2hlY2tNZXNzYWdlICgpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0odGhpcy5lbWFpbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFNob3cgc3VjY2VzcyBtZXNzYWdlXG4gICAgICAgICAqL1xuICAgICAgICBzaG93U3VjY2Vzc01lc3NhZ2UgKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnN1Y2Nlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGxvZ2luXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuTG9naW5Jbm5lciAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMubG9naW5fcG9wdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBTaG93IG1lc3NhZ2VcbiAgICAgICAgICovXG4gICAgICAgIHNob3dFcnJvck1lc3NhZ2UgKHJlYXNvbikge1xuICAgICAgICAgICAgdGhpcy5sYXN0ID0gbmV3IEFycmF5KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhyZWFzb24uY29kZSwgJ1Jlc3BvbmNlIHN0YXR1cyBjb2RlOiAnICsgcmVhc29uLmNvZGUgKyAnLiAnICsgcmVhc29uLm1lc3NhZ2UgKyAnLicpO1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLmVycm9yX21lc3NhZ2UsIHRydWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIGxhc3QgcGFnZVxuICAgICAgICAgKi9cbiAgICAgICAgZ29iYWNrICgpIHtcbiAgICAgICAgICAgIHRoaXMub3BlbkZvcm0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gU2hvdyBlbWFpbCBzZW50IHdhcm5pbmdcbiAgICAgICAgICovXG4gICAgICAgIGVtYWlsSGF2ZVNlbmQgKCkge1xuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLmVtYWlsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiByZWdpc3RlciBmb3JtXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuUmVnaXN0ZXJJbm5lciAoKSB7XG4gICAgICAgICAgICB0aGlzLm9wZW5Gb3JtKHRoaXMuc3RlcDEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBPcGVuIHJlZ2lzdGVyIGZvcm1cbiAgICAgICAgICovXG4gICAgICAgIG9wZW5SZWdpc3RlciAoKSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEFsbG93U2Nyb2xsaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5zdGVwMSwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5zdGVwMTtcblxuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0Ym94LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmxpZ2h0Ym94LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gcmVjb3ZlcnkgZm9ybXNcbiAgICAgICAgICovXG4gICAgICAgIG9wZW5SZWNvdmVyeSAoZXZlbnQpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBpZighdGhpcy5XZWJSVENTdXBwb3J0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5vcGVuRm9ybSh0aGlzLnJlY292ZXJ5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gT3BlbiByZWNvdmVyeSBmb3Jtc1xuICAgICAgICAgKiBAcGFyYW0gZm9ybSB7bm9kZX0gRm9ybSB5b3Ugd2FudCB0byBvcGVuXG4gICAgICAgICAqIEBwYXJhbSBiYWNrIHtub2RlfSBGb3JtIHdoaWNoIHlvdSB3YW50IHRvIG9wZW4gd2hlbiB1c2VyIHByZXNzIGJhY2ssIGJ5IGRlZmF1bHQg4oCUwqBsYXN0IGZvcm0gb3BlbmVkXG4gICAgICAgICAqL1xuICAgICAgICBvcGVuRm9ybSAocG9wdXAsIGRvbnRfc2F2ZSkge1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRBbGxvd1Njcm9sbGluZyhmYWxzZSk7XG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEtleWJvYXJkU2Nyb2xsaW5nKGZhbHNlKTtcblxuICAgICAgICAgICAgbGV0IGZvcm0gPSB0aGlzLmN1cnJlbnQucXVlcnlTZWxlY3RvcignZm9ybScpO1xuICAgICAgICAgICAgaWYgKGZvcm0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9Pntmb3JtLmNsZWFyKCk7fSwgMjUwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgcG9wdXAgPSB0aGlzLmxhc3QucG9wKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwb3B1cCA9PSBcInVuZGVmaW5lZFwiICYmIHRoaXMubGFzdC5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2VBbGwoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvbnRfc2F2ZSAhPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0LnB1c2godGhpcy5jdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybSA9IHBvcHVwLnF1ZXJ5U2VsZWN0b3IoJ2Zvcm0nKTtcbiAgICAgICAgICAgIGlmIChmb3JtICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY2xlYXJpbmcnKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpPT57Zm9ybS5jbGVhcigpO30sIDI1MCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IC0gdGhpcy5jdXJyZW50Lm9mZnNldFdpZHRoICsgXCJweFwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5jdXJyZW50LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQ6IDBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eShwb3B1cCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gcG9wdXA7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIENsb3NlIGFsbCBmb3Jtc1xuICAgICAgICAgKi9cbiAgICAgICAgY2xvc2VBbGwgKCkge1xuXG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEFsbG93U2Nyb2xsaW5nKHRydWUpO1xuICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zZXRLZXlib2FyZFNjcm9sbGluZyh0cnVlKTtcblxuICAgICAgICAgICAgbGV0IHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICByaWdodDogLSB0aGlzLmN1cnJlbnQub2Zmc2V0V2lkdGggKyBcInB4XCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmN1cnJlbnQsIHByb3BzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG5cbiAgICAgICAgICAgIHByb3BzID0ge1xuICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saWdodGJveC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmxpZ2h0Ym94LCBwcm9wcywgb3B0aW9ucyk7XG5cbiAgICAgICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNsZWFyQWxsICgpIHtcbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyksIChmb3JtKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9ybS5jbGVhcigpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICQoJy5sb2dpbiBzZWxlY3QnKS5zZWxlY3QyKFwiZGVzdHJveVwiKTtcbiAgICAgICAgICAgICQoJy5sb2dpbiBzZWxlY3QnKS5zZWxlY3QyKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIE9wZW4gbG9naW4gcG9wdXBcbiAgICAgICAgICovXG4gICAgICAgIG9wZW5Mb2dpbkZvcm0gKGV2ZW50KSB7XG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNldEFsbG93U2Nyb2xsaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICQuZm4uZnVsbHBhZ2Uuc2V0S2V5Ym9hcmRTY3JvbGxpbmcoZmFsc2UpO1xuXG4gICAgICAgICAgICBsZXQgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiAwXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5sb2dpbl9wb3B1cCwgcHJvcHMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdGhpcy5sb2dpbl9wb3B1cDtcblxuICAgICAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJlZ2luOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpZ2h0Ym94LnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAyNTBcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLmxpZ2h0Ym94LCBwcm9wcywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZXcgTWVudTtcbn0pKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbmNvbnNvbGUubG9nKCdwb3B1cCcpO1xuKGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzcyBQb3B1cFxuICAgICAqL1xuICAgIGNsYXNzIFBvcHVwIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBBZGRpbmcgZXZlbnRzIGFuZCBwcm9wZXJ0aWVzXG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKi9cbiAgICAgICAgY29uc3RydWN0b3IgKHBvcHVwKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHVwID0gcG9wdXA7XG4gICAgICAgICAgICBwb3B1cC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5jbG9zZSA9IHRoaXMuY2xvc2UuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMucG9wdXAub3BlbiA9IHRoaXMub3Blbi5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zaG93ID0gdGhpcy5zaG93LmJpbmQodGhpcyk7XG4gICAgICAgICAgICB0aGlzLnN0YXR1cyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5qYW1waW5nID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBzaG93ICgpIHtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGVbTW9kZXJuaXpyLnByZWZpeGVkKCd0cmFuc2Zvcm0nKV0gPSBcInJvdGF0ZVgoMClcIjtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhpZGUgKCkge1xuICAgICAgICAgICAgdGhpcy5wb3B1cC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICB0aGlzLnBvcHVwLnN0eWxlW01vZGVybml6ci5wcmVmaXhlZCgndHJhbnNmb3JtJyldID0gXCJyb3RhdGVYKDE4MGRlZylcIjtcbiAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCBcInN0b3BcIik7XG4gICAgICAgIH1cblxuICAgICAgICBjbG9zZSAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5qYW1waW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXR1cykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIFwiZmluaXNoXCIpO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge1xuICAgICAgICAgICAgICAgIHJvdGF0ZVg6IFwiMTIwZGVnXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBvcGVuICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmphbXBpbmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmp1bXAoKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmphbXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwgXCJmaW5pc2hcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7XG4gICAgICAgICAgICAgICAgcm90YXRlWDogXCIwZGVnXCJcbiAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogNTAwXG4gICAgICAgICAgICAgICAgLCBiZWdpbjogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9wdXAuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjIwZGVnXCJ9LCAxNTApO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMGRlZ1wifSwgMTI1KTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjEwZGVnXCJ9LCAyMDApO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwge3JvdGF0ZVg6IFwiMGRlZ1wifSwge1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uOjE3NVxuICAgICAgICAgICAgICAgICwgY29tcGxldGU6ICgpPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmphbXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAganVtcCAoKSB7XG4gICAgICAgICAgICB0aGlzLmphbXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgVmVsb2NpdHkodGhpcy5wb3B1cCwgXCJmaW5pc2hcIik7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIzNWRlZ1wifSwgMTUwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIDEyNSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIyMGRlZ1wifSwgMjAwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIDE3NSk7XG4gICAgICAgICAgICBWZWxvY2l0eSh0aGlzLnBvcHVwLCB7cm90YXRlWDogXCIxNWRlZ1wifSwgMjUwKTtcbiAgICAgICAgICAgIFZlbG9jaXR5KHRoaXMucG9wdXAsIHtyb3RhdGVYOiBcIjBkZWdcIn0sIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjI1XG4gICAgICAgICAgICAgICAgLCBjb21wbGV0ZTogKCk9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuamFtcGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgIH1cblxuXG4gICAgbGV0IHJlYWR5ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PntcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpPT4gcmVzb2x2ZSgpKTtcbiAgICB9KTtcblxuICAgIHJlYWR5LnRoZW4oKCk9PntcbiAgICAgICAgW10uZm9yRWFjaC5jYWxsKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3B1cF9icm93c2VyJyksIChwb3B1cCkgPT4ge1xuICAgICAgICAgICAgbmV3IFBvcHVwKHBvcHVwKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbn0pKCk7XG4iLCJcInVzZSBzdHJpY3RcIjtcbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIEBjbGFzc2Rlc2MgQ2xhc3MgcmVwcmVzZW50aW5nIGZvcm0gdmFsaWRhdGlvblxuICAgICAqIEBjbGFzc1xuICAgICAqL1xuXG4gICAgY2xhc3MgVmFsaWRhdGlvbiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gQWRkaW5nIGV2ZW50cyBhbmQgcHJvcGVydGllc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICovXG4gICAgICAgIGNvbnN0cnVjdG9yKGZvcm0pIHtcbiAgICAgICAgICAgIHRoaXMuZm9ybSA9IGZvcm07XG4gICAgICAgICAgICBmb3JtLnNldEF0dHJpYnV0ZShcIm5vdmFsaWRhdGVcIiwgXCJub3ZhbGlkYXRlXCIpO1xuICAgICAgICAgICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCB0aGlzLnZhbGlkYXRlLmJpbmQodGhpcykpO1xuICAgICAgICAgICAgZm9ybS52YWxpZGF0ZSA9IHRoaXMudmFsaWRhdGUuYmluZCh0aGlzKTtcbiAgICAgICAgICAgIGZvcm0uY2xlYXIgPSB0aGlzLmNsZWFyLmJpbmQodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSB7XG4gICAgICAgICAgICAgICAgZW46IHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6IFwiUmVxdWlyZWQgZmllbGRcIlxuICAgICAgICAgICAgICAgICAgICAsIGVtYWlsOiBcIldyb25nIGVtYWlsIGZvcm1hdFwiXG4gICAgICAgICAgICAgICAgICAgICwgZXF1YWw6IFwiUGFzc3dvcmQgZmllbGRzIHNob3VsZCBiZSBlcXVhbFwiXG4gICAgICAgICAgICAgICAgICAgICwgdXJsOiBcIldyb25nIHVybCBmb3JtYXRcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAsIHJ1OiB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiBcItCf0L7Qu9C1INC+0LHRj9C30LDRgtC10LvRjNC90L4g0LTQu9GPINC30LDQv9C+0LvQvdC10L3QuNGPXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlbWFpbDogXCLQn9GA0L7QstC10YDRjNGC0LUg0YTQvtGA0LzQsNGCIGVtYWlsXCJcbiAgICAgICAgICAgICAgICAgICAgLCBlcXVhbDogXCLQn9Cw0YDQvtC70Lgg0LTQvtC70LbQvdGLINGB0L7QstC/0LDQtNCw0YLRjFwiXG4gICAgICAgICAgICAgICAgICAgICwgdXJsOiBcItCf0YDQvtCy0LXRgNGM0YLQtSDRhNC+0YDQvNCw0YIgVVJMXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlc2V0IGZvcm0gYW5kIGNsZWFyIGVycm9yc1xuICAgICAgICAgKi9cbiAgICAgICAgY2xlYXIgKCkge1xuICAgICAgICAgICAgdGhpcy5mb3JtLnJlc2V0KCk7XG4gICAgICAgICAgICBsZXQgc2VsZWN0b3JzID0gJCh0aGlzLmZvcm0pLmZpbmQoJ3NlbGVjdCcpO1xuICAgICAgICAgICAgaWYgKHNlbGVjdG9ycy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3JzLnNlbGVjdDIoXCJkZXN0cm95XCIpO1xuICAgICAgICAgICAgICAgIHNlbGVjdG9ycy5zZWxlY3QyKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCk9PntcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmZvcm0tZXJyb3InKSxcbiAgICAgICAgICAgICAgICAgICAgZmllbGRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnW2RhdGEtdmFsaWRdLCBbZGF0YS1pbnZhbGlkXScpO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGVycm9ycywgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGZpZWxkcywgKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWxpZCcpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB9LDEwMCk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogQGRlc2NyaXB0aW9uIFJlbW92ZSBlcnJvciBtZXNzYWdlIGFmdGVyIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gZWxlbWVudCwgYWZ0ZXIgd2hpY2ggd2Ugd2lsbCBhZGQgZXJyb3IgbWVzc2FnZVxuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZSAtIGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICogQHBhcmFtIHtTdHJpbmd9IHR5cHBlIC0gZXJyb3IgdHlwZVxuICAgICAgICAgKi9cbiAgICAgICAgYWRkRXJyb3IoZWxlbWVudCwgbWVzc2FnZSwgdHlwZSkge1xuXG4gICAgICAgICAgICBpZiAoZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWVycm9yW2RhdGEtdHlwZT1cIicgKyB0eXBlICsgJ1wiXScpICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdQJyk7XG4gICAgICAgICAgICBlcnJvci5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShtZXNzYWdlKSk7XG4gICAgICAgICAgICBlcnJvci5jbGFzc0xpc3QuYWRkKCdmb3JtLWVycm9yJyk7XG4gICAgICAgICAgICBlcnJvci5zZXRBdHRyaWJ1dGUoJ2RhdGEtdHlwZScsIHR5cGUpO1xuICAgICAgICAgICAgZWxlbWVudC5wYXJlbnROb2RlLmFwcGVuZENoaWxkKGVycm9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAZGVzY3JpcHRpb24gUmVtb3ZlIGVycm9yIG1lc3NhZ2Ugb2Ygc29tZSB0eXBlIGFmdGVyIGVsZW1lbnRcbiAgICAgICAgICogQHBhcmFtIHtOb2RlfSBlbGVtZW50IC0gZWxlbWVudCwgYWZ0ZXIgd2hpY2ggZXJyb3IgbWVzc2FnZSBpc1xuICAgICAgICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwcGUgLSBlcnJvciB0eXBlXG4gICAgICAgICAqL1xuICAgICAgICBjbGVhckVycm9yKGVsZW1lbnQsIHR5cGUpIHtcblxuICAgICAgICAgICAgbGV0IGVyciA9IGVsZW1lbnQucGFyZW50Tm9kZS5xdWVyeVNlbGVjdG9yKCcuZm9ybS1lcnJvcltkYXRhLXR5cGU9XCInICsgdHlwZSArICdcIl0nKTtcbiAgICAgICAgICAgIGlmIChlcnIgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBkZXNjcmlwdGlvbiBWYWxpZGF0ZSBmb3JtXG4gICAgICAgICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50IC0gc3VibWl0IGV2ZW50XG4gICAgICAgICAqIEB0b2RvIEltcGxlbWVudCBsb2dpbiB2YWxpZGF0aW9uXG4gICAgICAgICAqL1xuICAgICAgICB2YWxpZGF0ZShldmVudCkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudCAhPSBcInVuZGVmaW5lZFwiICYmICFldmVudC5jdXJyZW50VGFyZ2V0Lmhhc0F0dHJpYnV0ZSgnZGF0YS1yZWxvYWQnKSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB2YWxpZCA9IHRydWUsXG4gICAgICAgICAgICAgICAgbmV4dCA9IG51bGwsXG4gICAgICAgICAgICAgICAgZXF1YWxfZmllbGRzID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tkYXRhLWVxdWFsXScpLFxuICAgICAgICAgICAgICAgIHJlcXVpcmVkX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdbcmVxdWlyZWRdJyksXG4gICAgICAgICAgICAgICAgdXJsX2ZpZWxkcyA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPVwidXJsXCJdJyksXG4gICAgICAgICAgICAgICAgZW1haWxfZmllbGRzID0gdGhpcy5mb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0W3R5cGU9XCJlbWFpbFwiXScpLFxuICAgICAgICAgICAgICAgIHVybF9yZWdleCA9IG5ldyBSZWdFeHAoXCJeKGh0dHB8aHR0cHN8ZnRwKVxcOi8vKFthLXpBLVowLTlcXC5cXC1dKyhcXDpbYS16QS1aMC05XFwuJmFtcDslXFwkXFwtXSspKkApKigoMjVbMC01XXwyWzAtNF1bMC05XXxbMC0xXXsxfVswLTldezJ9fFsxLTldezF9WzAtOV17MX18WzEtOV0pXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFsxLTldfDApXFwuKDI1WzAtNV18MlswLTRdWzAtOV18WzAtMV17MX1bMC05XXsyfXxbMS05XXsxfVswLTldezF9fFswLTldKXwoW2EtekEtWjAtOVxcLV0rXFwuKSpbYS16QS1aMC05XFwtXStcXC4oY29tfGVkdXxnb3Z8aW50fG1pbHxuZXR8b3JnfGJpenxhcnBhfGluZm98bmFtZXxwcm98YWVyb3xjb29wfG11c2V1bXxbYS16QS1aXXsyfSkpKFxcOlswLTldKykqKC8oJHxbYS16QS1aMC05XFwuXFwsXFw/XFwnXFxcXFxcKyZhbXA7JVxcJCNcXD1+X1xcLV0rKSkqJFwiLCBcImlcIiksXG4gICAgICAgICAgICAgICAgZW1haWxfcmVnZXggPSBuZXcgUmVnRXhwKFwiXihbYS16QS1aMC05X1xcLlxcLV0pK1xcQCgoW2EtekEtWjAtOVxcLV0pK1xcLikrKFthLXpBLVowLTldezIsNH0pKyRcIik7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIGVxdWFsIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKGVxdWFsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXF1YWwgPSB0aGlzLmZvcm0ucXVlcnlTZWxlY3RvcihlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtZXF1YWxcIikpO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnZhbHVlLnRyaW0oKSAhPSBlcXVhbC52YWx1ZS50cmltKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0uZXF1YWwsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsIFwiZXF1YWxcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qIGNoZWNrIHJlcXVpcmVkIGZpZWxkcyAqL1xuICAgICAgICAgICAgW10uZm9yRWFjaC5jYWxsKHJlcXVpcmVkX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC52YWx1ZS50cmltKCkgPT09IFwiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRFcnJvcihlbGVtZW50LCB0aGlzLm1lc3NhZ2VzW2RvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoJ2xhbmcnKV0ucmVxdWlyZWQsIFwicmVxdWlyZWRcIik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdyZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayB1cmwgZmllbGRzICovXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwodXJsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoKGVsZW1lbnQudmFsdWUudHJpbSgpLmxlbmd0aCA+IDApICYmICh1cmxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS51cmwsICd1cmwnKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyRXJyb3IoZWxlbWVudCwgJ3VybCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKiBjaGVjayBlbWFpbCBmaWVsZHMgKi9cbiAgICAgICAgICAgIFtdLmZvckVhY2guY2FsbChlbWFpbF9maWVsZHMsIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKChlbGVtZW50LnZhbHVlLnRyaW0oKS5sZW5ndGggPiAwKSAmJiAoZW1haWxfcmVnZXgudGVzdChlbGVtZW50LnZhbHVlLnRyaW0oKSkgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZEVycm9yKGVsZW1lbnQsIHRoaXMubWVzc2FnZXNbZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnbGFuZycpXS5lbWFpbCwgJ2VtYWlsJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhckVycm9yKGVsZW1lbnQsICdlbWFpbCcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgIGxldCBhbGxfZmllbGRzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZXF1YWxfZmllbGRzKS5jb25jYXQoXG4gICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwocmVxdWlyZWRfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh1cmxfZmllbGRzKSxcbiAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbWFpbF9maWVsZHMpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBbXS5mb3JFYWNoLmNhbGwoYWxsX2ZpZWxkcywgKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXJyID0gZWxlbWVudC5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgaWYgKGVyciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBpbnZhbGlkID0gZG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlKFwiZGF0YS1pbnZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICBpbnZhbGlkLnZhbHVlID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50YWdOYW1lID09IFwiU0VMRUNUXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcuc2V0QXR0cmlidXRlTm9kZShpbnZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZU5vZGUoaW52YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS12YWxpZCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgdmFsaWQgPSBkb2N1bWVudC5jcmVhdGVBdHRyaWJ1dGUoXCJkYXRhLXZhbGlkXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YWxpZC52YWx1ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnRhZ05hbWUgPT0gXCJTRUxFQ1RcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5uZXh0U2libGluZy5zZXRBdHRyaWJ1dGVOb2RlKHZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQubmV4dFNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKCdkYXRhLWludmFsaWQnKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlTm9kZSh2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnZGF0YS1pbnZhbGlkJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgbGV0IGVycm9yc19jb3VudCA9IHRoaXMuZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9lcnJvcicpLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChlcnJvcnNfY291bnQgPiAwKSB7XG4gICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXZlbnQgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xuXG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGxldCByZWFkeSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgIT0gXCJsb2FkaW5nXCIpIHJldHVybiByZXNvbHZlKCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsICgpID0+IHJlc29sdmUoKSk7XG4gICAgfSk7XG5cbiAgICByZWFkeS50aGVuKGZ1bmN0aW9uKCkge1xuICAgICAgICBsZXQgZm9ybXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdmb3JtJyk7XG4gICAgICAgIFtdLmZvckVhY2guY2FsbChmb3JtcywgKGZvcm0pID0+IHtcbiAgICAgICAgICAgIG5ldyBWYWxpZGF0aW9uKGZvcm0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcblxufSkoKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==